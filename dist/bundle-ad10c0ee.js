/*! For license information please see bundle-ad10c0ee.js.LICENSE.txt */
(()=>{"use strict";var e={551:(e,t,n)=>{var r=n(540),l=n(982);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var o=new Set,u={};function i(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(u[e]=t,e=0;e<t.length;e++)o.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,l,a,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=l,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=o}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function b(e,t,n,r){var l=y.hasOwnProperty(t)?y[t]:null;(null!==l?0!==l.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,l,r)&&(n=null),r||null===l?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):l.mustUseProperty?e[l.propertyName]=null===n?3!==l.type&&"":n:(t=l.attributeName,r=l.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(l=l.type)||4===l&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,g);y[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,g);y[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,g);y[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=Symbol.for("react.element"),S=Symbol.for("react.portal"),_=Symbol.for("react.fragment"),x=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),C=Symbol.for("react.provider"),N=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),z=Symbol.for("react.suspense"),T=Symbol.for("react.suspense_list"),O=Symbol.for("react.memo"),L=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var R=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var M=Symbol.iterator;function I(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=M&&e[M]||e["@@iterator"])?e:null}var F,D=Object.assign;function j(e){if(void 0===F)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);F=t&&t[1]||""}return"\n"+F+e}var A=!1;function U(e,t){if(!e||A)return"";A=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var l=t.stack.split("\n"),a=r.stack.split("\n"),o=l.length-1,u=a.length-1;1<=o&&0<=u&&l[o]!==a[u];)u--;for(;1<=o&&0<=u;o--,u--)if(l[o]!==a[u]){if(1!==o||1!==u)do{if(o--,0>--u||l[o]!==a[u]){var i="\n"+l[o].replace(" at new "," at ");return e.displayName&&i.includes("<anonymous>")&&(i=i.replace("<anonymous>",e.displayName)),i}}while(1<=o&&0<=u);break}}}finally{A=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?j(e):""}function $(e){switch(e.tag){case 5:return j(e.type);case 16:return j("Lazy");case 13:return j("Suspense");case 19:return j("SuspenseList");case 0:case 2:case 15:return U(e.type,!1);case 11:return U(e.type.render,!1);case 1:return U(e.type,!0);default:return""}}function V(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case _:return"Fragment";case S:return"Portal";case E:return"Profiler";case x:return"StrictMode";case z:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case N:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case O:return null!==(t=e.displayName||null)?t:V(e.type)||"Memo";case L:t=e._payload,e=e._init;try{return V(e(t))}catch(e){}}return null}function B(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return V(t);case 8:return t===x?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Q(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var l=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return l.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function X(e,t){var n=t.checked;return D({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Y(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=W(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function G(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function Z(e,t){G(e,t);var n=W(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,W(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var l=0;l<n.length;l++)t["$"+n[l]]=!0;for(n=0;n<e.length;n++)l=t.hasOwnProperty("$"+e[n].value),e[n].selected!==l&&(e[n].selected=l),l&&r&&(e[n].defaultSelected=!0)}else{for(n=""+W(n),t=null,l=0;l<e.length;l++){if(e[l].value===n)return e[l].selected=!0,void(r&&(e[l].defaultSelected=!0));null!==t||e[l].disabled||(t=e[l])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return D({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:W(n)}}function ae(e,t){var n=W(t.value),r=W(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function oe(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function ue(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ie(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ue(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ye(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),l=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,l):e[n]=l}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ve=D({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function ke(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,_e=null,xe=null;function Ee(e){if(e=bl(e)){if("function"!=typeof Se)throw Error(a(280));var t=e.stateNode;t&&(t=kl(t),Se(e.stateNode,e.type,t))}}function Ce(e){_e?xe?xe.push(e):xe=[e]:_e=e}function Ne(){if(_e){var e=_e,t=xe;if(xe=_e=null,Ee(e),t)for(e=0;e<t.length;e++)Ee(t[e])}}function Pe(e,t){return e(t)}function ze(){}var Te=!1;function Oe(e,t,n){if(Te)return e(t,n);Te=!0;try{return Pe(e,t,n)}finally{Te=!1,(null!==_e||null!==xe)&&(ze(),Ne())}}function Le(e,t){var n=e.stateNode;if(null===n)return null;var r=kl(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Re=!1;if(c)try{var Me={};Object.defineProperty(Me,"passive",{get:function(){Re=!0}}),window.addEventListener("test",Me,Me),window.removeEventListener("test",Me,Me)}catch(ce){Re=!1}function Ie(e,t,n,r,l,a,o,u,i){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Fe=!1,De=null,je=!1,Ae=null,Ue={onError:function(e){Fe=!0,De=e}};function $e(e,t,n,r,l,a,o,u,i){Fe=!1,De=null,Ie.apply(Ue,arguments)}function Ve(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Be(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function We(e){if(Ve(e)!==e)throw Error(a(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ve(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var l=n.return;if(null===l)break;var o=l.alternate;if(null===o){if(null!==(r=l.return)){n=r;continue}break}if(l.child===o.child){for(o=l.child;o;){if(o===n)return We(l),e;if(o===r)return We(l),t;o=o.sibling}throw Error(a(188))}if(n.return!==r.return)n=l,r=o;else{for(var u=!1,i=l.child;i;){if(i===n){u=!0,n=l,r=o;break}if(i===r){u=!0,r=l,n=o;break}i=i.sibling}if(!u){for(i=o.child;i;){if(i===n){u=!0,n=o,r=l;break}if(i===r){u=!0,r=o,n=l;break}i=i.sibling}if(!u)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?Qe(e):null}function Qe(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Qe(e);if(null!==t)return t;e=e.sibling}return null}var Ke=l.unstable_scheduleCallback,qe=l.unstable_cancelCallback,Xe=l.unstable_shouldYield,Ye=l.unstable_requestPaint,Ge=l.unstable_now,Ze=l.unstable_getCurrentPriorityLevel,Je=l.unstable_ImmediatePriority,et=l.unstable_UserBlockingPriority,tt=l.unstable_NormalPriority,nt=l.unstable_LowPriority,rt=l.unstable_IdlePriority,lt=null,at=null,ot=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(ut(e)/it|0)|0},ut=Math.log,it=Math.LN2,st=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,l=e.suspendedLanes,a=e.pingedLanes,o=268435455&n;if(0!==o){var u=o&~l;0!==u?r=ft(u):0!=(a&=o)&&(r=ft(a))}else 0!=(o=n&~l)?r=ft(o):0!==a&&(r=ft(a));if(0===r)return 0;if(0!==t&&t!==r&&!(t&l)&&((l=r&-r)>=(a=t&-t)||16===l&&4194240&a))return t;if(4&r&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)l=1<<(n=31-ot(t)),r|=e[n],t&=~l;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=st;return!(4194240&(st<<=1))&&(st=64),e}function yt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function vt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-ot(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-ot(n),l=1<<r;l&t|e[r]&t&&(e[r]|=t),n&=~l}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var kt,St,_t,xt,Et,Ct=!1,Nt=[],Pt=null,zt=null,Tt=null,Ot=new Map,Lt=new Map,Rt=[],Mt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function It(e,t){switch(e){case"focusin":case"focusout":Pt=null;break;case"dragenter":case"dragleave":zt=null;break;case"mouseover":case"mouseout":Tt=null;break;case"pointerover":case"pointerout":Ot.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Lt.delete(t.pointerId)}}function Ft(e,t,n,r,l,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[l]},null!==t&&null!==(t=bl(t))&&St(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==l&&-1===t.indexOf(l)&&t.push(l),e)}function Dt(e){var t=gl(e.target);if(null!==t){var n=Ve(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Be(n)))return e.blockedOn=t,void Et(e.priority,(function(){_t(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function jt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=bl(n))&&St(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function At(e,t,n){jt(e)&&n.delete(t)}function Ut(){Ct=!1,null!==Pt&&jt(Pt)&&(Pt=null),null!==zt&&jt(zt)&&(zt=null),null!==Tt&&jt(Tt)&&(Tt=null),Ot.forEach(At),Lt.forEach(At)}function $t(e,t){e.blockedOn===t&&(e.blockedOn=null,Ct||(Ct=!0,l.unstable_scheduleCallback(l.unstable_NormalPriority,Ut)))}function Vt(e){function t(t){return $t(t,e)}if(0<Nt.length){$t(Nt[0],e);for(var n=1;n<Nt.length;n++){var r=Nt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Pt&&$t(Pt,e),null!==zt&&$t(zt,e),null!==Tt&&$t(Tt,e),Ot.forEach(t),Lt.forEach(t),n=0;n<Rt.length;n++)(r=Rt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Rt.length&&null===(n=Rt[0]).blockedOn;)Dt(n),null===n.blockedOn&&Rt.shift()}var Bt=w.ReactCurrentBatchConfig,Wt=!0;function Ht(e,t,n,r){var l=bt,a=Bt.transition;Bt.transition=null;try{bt=1,Kt(e,t,n,r)}finally{bt=l,Bt.transition=a}}function Qt(e,t,n,r){var l=bt,a=Bt.transition;Bt.transition=null;try{bt=4,Kt(e,t,n,r)}finally{bt=l,Bt.transition=a}}function Kt(e,t,n,r){if(Wt){var l=Xt(e,t,n,r);if(null===l)Wr(e,t,r,qt,n),It(e,r);else if(function(e,t,n,r,l){switch(t){case"focusin":return Pt=Ft(Pt,e,t,n,r,l),!0;case"dragenter":return zt=Ft(zt,e,t,n,r,l),!0;case"mouseover":return Tt=Ft(Tt,e,t,n,r,l),!0;case"pointerover":var a=l.pointerId;return Ot.set(a,Ft(Ot.get(a)||null,e,t,n,r,l)),!0;case"gotpointercapture":return a=l.pointerId,Lt.set(a,Ft(Lt.get(a)||null,e,t,n,r,l)),!0}return!1}(l,e,t,n,r))r.stopPropagation();else if(It(e,r),4&t&&-1<Mt.indexOf(e)){for(;null!==l;){var a=bl(l);if(null!==a&&kt(a),null===(a=Xt(e,t,n,r))&&Wr(e,t,r,qt,n),a===l)break;l=a}null!==l&&r.stopPropagation()}else Wr(e,t,r,null,n)}}var qt=null;function Xt(e,t,n,r){if(qt=null,null!==(e=gl(e=ke(r))))if(null===(t=Ve(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Be(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return qt=e,null}function Yt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ze()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Gt=null,Zt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Zt,r=n.length,l="value"in Gt?Gt.value:Gt.textContent,a=l.length;for(e=0;e<r&&n[e]===l[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===l[a-t];t++);return Jt=l.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function ln(e){function t(t,n,r,l,a){for(var o in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=l,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(l):l[o]);return this.isDefaultPrevented=(null!=l.defaultPrevented?l.defaultPrevented:!1===l.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return D(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,on,un,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=ln(sn),fn=D({},sn,{view:0,detail:0}),dn=ln(fn),pn=D({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(an=e.screenX-un.screenX,on=e.screenY-un.screenY):on=an=0,un=e),an)},movementY:function(e){return"movementY"in e?e.movementY:on}}),hn=ln(pn),mn=ln(D({},pn,{dataTransfer:0})),yn=ln(D({},fn,{relatedTarget:0})),vn=ln(D({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=D({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=ln(gn),wn=ln(D({},sn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},_n={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=_n[e])&&!!t[e]}function En(){return xn}var Cn=D({},fn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Nn=ln(Cn),Pn=ln(D({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),zn=ln(D({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),Tn=ln(D({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),On=D({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Ln=ln(On),Rn=[9,13,27,32],Mn=c&&"CompositionEvent"in window,In=null;c&&"documentMode"in document&&(In=document.documentMode);var Fn=c&&"TextEvent"in window&&!In,Dn=c&&(!Mn||In&&8<In&&11>=In),jn=String.fromCharCode(32),An=!1;function Un(e,t){switch(e){case"keyup":return-1!==Rn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function $n(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Vn=!1,Bn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Bn[e.type]:"textarea"===t}function Hn(e,t,n,r){Ce(r),0<(t=Qr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Qn=null,Kn=null;function qn(e){jr(e,0)}function Xn(e){if(K(wl(e)))return e}function Yn(e,t){if("change"===e)return t}var Gn=!1;if(c){var Zn;if(c){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Zn=Jn}else Zn=!1;Gn=Zn&&(!document.documentMode||9<document.documentMode)}function tr(){Qn&&(Qn.detachEvent("onpropertychange",nr),Kn=Qn=null)}function nr(e){if("value"===e.propertyName&&Xn(Kn)){var t=[];Hn(t,Kn,e,ke(e)),Oe(qn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Kn=n,(Qn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function lr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Xn(Kn)}function ar(e,t){if("click"===e)return Xn(t)}function or(e,t){if("input"===e||"change"===e)return Xn(t)}var ur="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ir(e,t){if(ur(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var l=n[r];if(!f.call(t,l)||!ur(e[l],t[l]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=q((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var l=n.textContent.length,a=Math.min(r.start,l);r=void 0===r.end?a:Math.min(r.end,l),!e.extend&&a>r&&(l=r,r=a,a=l),l=cr(n,a);var o=cr(n,r);l&&o&&(1!==e.rangeCount||e.anchorNode!==l.node||e.anchorOffset!==l.offset||e.focusNode!==o.node||e.focusOffset!==o.offset)&&((t=t.createRange()).setStart(l.node,l.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(o.node,o.offset)):(t.setEnd(o.node,o.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,yr=null,vr=null,gr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==yr||yr!==q(r)||(r="selectionStart"in(r=yr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&ir(gr,r)||(gr=r,0<(r=Qr(vr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=yr)))}function kr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Sr={animationend:kr("Animation","AnimationEnd"),animationiteration:kr("Animation","AnimationIteration"),animationstart:kr("Animation","AnimationStart"),transitionend:kr("Transition","TransitionEnd")},_r={},xr={};function Er(e){if(_r[e])return _r[e];if(!Sr[e])return e;var t,n=Sr[e];for(t in n)if(n.hasOwnProperty(t)&&t in xr)return _r[e]=n[t];return e}c&&(xr=document.createElement("div").style,"AnimationEvent"in window||(delete Sr.animationend.animation,delete Sr.animationiteration.animation,delete Sr.animationstart.animation),"TransitionEvent"in window||delete Sr.transitionend.transition);var Cr=Er("animationend"),Nr=Er("animationiteration"),Pr=Er("animationstart"),zr=Er("transitionend"),Tr=new Map,Or="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Lr(e,t){Tr.set(e,t),i(t,[e])}for(var Rr=0;Rr<Or.length;Rr++){var Mr=Or[Rr];Lr(Mr.toLowerCase(),"on"+(Mr[0].toUpperCase()+Mr.slice(1)))}Lr(Cr,"onAnimationEnd"),Lr(Nr,"onAnimationIteration"),Lr(Pr,"onAnimationStart"),Lr("dblclick","onDoubleClick"),Lr("focusin","onFocus"),Lr("focusout","onBlur"),Lr(zr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),i("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),i("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),i("onBeforeInput",["compositionend","keypress","textInput","paste"]),i("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),i("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),i("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ir="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Fr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ir));function Dr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,l,o,u,i,s){if($e.apply(this,arguments),Fe){if(!Fe)throw Error(a(198));var c=De;Fe=!1,De=null,je||(je=!0,Ae=c)}}(r,t,void 0,e),e.currentTarget=null}function jr(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],l=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var o=r.length-1;0<=o;o--){var u=r[o],i=u.instance,s=u.currentTarget;if(u=u.listener,i!==a&&l.isPropagationStopped())break e;Dr(l,u,s),a=i}else for(o=0;o<r.length;o++){if(i=(u=r[o]).instance,s=u.currentTarget,u=u.listener,i!==a&&l.isPropagationStopped())break e;Dr(l,u,s),a=i}}}if(je)throw e=Ae,je=!1,Ae=null,e}function Ar(e,t){var n=t[ml];void 0===n&&(n=t[ml]=new Set);var r=e+"__bubble";n.has(r)||(Br(t,e,2,!1),n.add(r))}function Ur(e,t,n){var r=0;t&&(r|=4),Br(n,e,r,t)}var $r="_reactListening"+Math.random().toString(36).slice(2);function Vr(e){if(!e[$r]){e[$r]=!0,o.forEach((function(t){"selectionchange"!==t&&(Fr.has(t)||Ur(t,!1,e),Ur(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[$r]||(t[$r]=!0,Ur("selectionchange",!1,t))}}function Br(e,t,n,r){switch(Yt(t)){case 1:var l=Ht;break;case 4:l=Qt;break;default:l=Kt}n=l.bind(null,t,n,e),l=void 0,!Re||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(l=!0),r?void 0!==l?e.addEventListener(t,n,{capture:!0,passive:l}):e.addEventListener(t,n,!0):void 0!==l?e.addEventListener(t,n,{passive:l}):e.addEventListener(t,n,!1)}function Wr(e,t,n,r,l){var a=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var u=r.stateNode.containerInfo;if(u===l||8===u.nodeType&&u.parentNode===l)break;if(4===o)for(o=r.return;null!==o;){var i=o.tag;if((3===i||4===i)&&((i=o.stateNode.containerInfo)===l||8===i.nodeType&&i.parentNode===l))return;o=o.return}for(;null!==u;){if(null===(o=gl(u)))return;if(5===(i=o.tag)||6===i){r=a=o;continue e}u=u.parentNode}}r=r.return}Oe((function(){var r=a,l=ke(n),o=[];e:{var u=Tr.get(e);if(void 0!==u){var i=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":i=Nn;break;case"focusin":s="focus",i=yn;break;case"focusout":s="blur",i=yn;break;case"beforeblur":case"afterblur":i=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":i=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":i=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":i=zn;break;case Cr:case Nr:case Pr:i=vn;break;case zr:i=Tn;break;case"scroll":i=dn;break;case"wheel":i=Ln;break;case"copy":case"cut":case"paste":i=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":i=Pn}var c=!!(4&t),f=!c&&"scroll"===e,d=c?null!==u?u+"Capture":null:u;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Le(h,d))&&c.push(Hr(h,m,p))),f)break;h=h.return}0<c.length&&(u=new i(u,s,null,n,l),o.push({event:u,listeners:c}))}}if(!(7&t)){if(i="mouseout"===e||"pointerout"===e,(!(u="mouseover"===e||"pointerover"===e)||n===we||!(s=n.relatedTarget||n.fromElement)||!gl(s)&&!s[hl])&&(i||u)&&(u=l.window===l?l:(u=l.ownerDocument)?u.defaultView||u.parentWindow:window,i?(i=r,null!==(s=(s=n.relatedTarget||n.toElement)?gl(s):null)&&(s!==(f=Ve(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(i=null,s=r),i!==s)){if(c=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==i?u:wl(i),p=null==s?u:wl(s),(u=new c(m,h+"leave",i,n,l)).target=f,u.relatedTarget=p,m=null,gl(l)===r&&((c=new c(d,h+"enter",s,n,l)).target=p,c.relatedTarget=f,m=c),f=m,i&&s)e:{for(d=s,h=0,p=c=i;p;p=Kr(p))h++;for(p=0,m=d;m;m=Kr(m))p++;for(;0<h-p;)c=Kr(c),h--;for(;0<p-h;)d=Kr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Kr(c),d=Kr(d)}c=null}else c=null;null!==i&&qr(o,u,i,c,!1),null!==s&&null!==f&&qr(o,f,s,c,!0)}if("select"===(i=(u=r?wl(r):window).nodeName&&u.nodeName.toLowerCase())||"input"===i&&"file"===u.type)var y=Yn;else if(Wn(u))if(Gn)y=or;else{y=lr;var v=rr}else(i=u.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===u.type||"radio"===u.type)&&(y=ar);switch(y&&(y=y(e,r))?Hn(o,y,n,l):(v&&v(e,u,r),"focusout"===e&&(v=u._wrapperState)&&v.controlled&&"number"===u.type&&ee(u,"number",u.value)),v=r?wl(r):window,e){case"focusin":(Wn(v)||"true"===v.contentEditable)&&(yr=v,vr=r,gr=null);break;case"focusout":gr=vr=yr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(o,n,l);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(o,n,l)}var g;if(Mn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Vn?Un(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Dn&&"ko"!==n.locale&&(Vn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Vn&&(g=en()):(Zt="value"in(Gt=l)?Gt.value:Gt.textContent,Vn=!0)),0<(v=Qr(r,b)).length&&(b=new wn(b,e,null,n,l),o.push({event:b,listeners:v}),(g||null!==(g=$n(n)))&&(b.data=g))),(g=Fn?function(e,t){switch(e){case"compositionend":return $n(t);case"keypress":return 32!==t.which?null:(An=!0,jn);case"textInput":return(e=t.data)===jn&&An?null:e;default:return null}}(e,n):function(e,t){if(Vn)return"compositionend"===e||!Mn&&Un(e,t)?(e=en(),Jt=Zt=Gt=null,Vn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Dn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Qr(r,"onBeforeInput")).length&&(l=new wn("onBeforeInput","beforeinput",null,n,l),o.push({event:l,listeners:r}),l.data=g)}jr(o,t)}))}function Hr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Qr(e,t){for(var n=t+"Capture",r=[];null!==e;){var l=e,a=l.stateNode;5===l.tag&&null!==a&&(l=a,null!=(a=Le(e,n))&&r.unshift(Hr(e,a,l)),null!=(a=Le(e,t))&&r.push(Hr(e,a,l))),e=e.return}return r}function Kr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function qr(e,t,n,r,l){for(var a=t._reactName,o=[];null!==n&&n!==r;){var u=n,i=u.alternate,s=u.stateNode;if(null!==i&&i===r)break;5===u.tag&&null!==s&&(u=s,l?null!=(i=Le(n,a))&&o.unshift(Hr(n,i,u)):l||null!=(i=Le(n,a))&&o.push(Hr(n,i,u))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}var Xr=/\r\n?/g,Yr=/\u0000|\uFFFD/g;function Gr(e){return("string"==typeof e?e:""+e).replace(Xr,"\n").replace(Yr,"")}function Zr(e,t,n){if(t=Gr(t),Gr(e)!==t&&n)throw Error(a(425))}function Jr(){}var el=null,tl=null;function nl(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var rl="function"==typeof setTimeout?setTimeout:void 0,ll="function"==typeof clearTimeout?clearTimeout:void 0,al="function"==typeof Promise?Promise:void 0,ol="function"==typeof queueMicrotask?queueMicrotask:void 0!==al?function(e){return al.resolve(null).then(e).catch(ul)}:rl;function ul(e){setTimeout((function(){throw e}))}function il(e,t){var n=t,r=0;do{var l=n.nextSibling;if(e.removeChild(n),l&&8===l.nodeType)if("/$"===(n=l.data)){if(0===r)return e.removeChild(l),void Vt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=l}while(n);Vt(t)}function sl(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function cl(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fl=Math.random().toString(36).slice(2),dl="__reactFiber$"+fl,pl="__reactProps$"+fl,hl="__reactContainer$"+fl,ml="__reactEvents$"+fl,yl="__reactListeners$"+fl,vl="__reactHandles$"+fl;function gl(e){var t=e[dl];if(t)return t;for(var n=e.parentNode;n;){if(t=n[hl]||n[dl]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=cl(e);null!==e;){if(n=e[dl])return n;e=cl(e)}return t}n=(e=n).parentNode}return null}function bl(e){return!(e=e[dl]||e[hl])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wl(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function kl(e){return e[pl]||null}var Sl=[],_l=-1;function xl(e){return{current:e}}function El(e){0>_l||(e.current=Sl[_l],Sl[_l]=null,_l--)}function Cl(e,t){_l++,Sl[_l]=e.current,e.current=t}var Nl={},Pl=xl(Nl),zl=xl(!1),Tl=Nl;function Ol(e,t){var n=e.type.contextTypes;if(!n)return Nl;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var l,a={};for(l in n)a[l]=t[l];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Ll(e){return null!=e.childContextTypes}function Rl(){El(zl),El(Pl)}function Ml(e,t,n){if(Pl.current!==Nl)throw Error(a(168));Cl(Pl,t),Cl(zl,n)}function Il(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var l in r=r.getChildContext())if(!(l in t))throw Error(a(108,B(e)||"Unknown",l));return D({},n,r)}function Fl(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Nl,Tl=Pl.current,Cl(Pl,e),Cl(zl,zl.current),!0}function Dl(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=Il(e,t,Tl),r.__reactInternalMemoizedMergedChildContext=e,El(zl),El(Pl),Cl(Pl,e)):El(zl),Cl(zl,n)}var jl=null,Al=!1,Ul=!1;function $l(e){null===jl?jl=[e]:jl.push(e)}function Vl(){if(!Ul&&null!==jl){Ul=!0;var e=0,t=bt;try{var n=jl;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}jl=null,Al=!1}catch(t){throw null!==jl&&(jl=jl.slice(e+1)),Ke(Je,Vl),t}finally{bt=t,Ul=!1}}return null}var Bl=[],Wl=0,Hl=null,Ql=0,Kl=[],ql=0,Xl=null,Yl=1,Gl="";function Zl(e,t){Bl[Wl++]=Ql,Bl[Wl++]=Hl,Hl=e,Ql=t}function Jl(e,t,n){Kl[ql++]=Yl,Kl[ql++]=Gl,Kl[ql++]=Xl,Xl=e;var r=Yl;e=Gl;var l=32-ot(r)-1;r&=~(1<<l),n+=1;var a=32-ot(t)+l;if(30<a){var o=l-l%5;a=(r&(1<<o)-1).toString(32),r>>=o,l-=o,Yl=1<<32-ot(t)+l|n<<l|r,Gl=a+e}else Yl=1<<a|n<<l|r,Gl=e}function ea(e){null!==e.return&&(Zl(e,1),Jl(e,1,0))}function ta(e){for(;e===Hl;)Hl=Bl[--Wl],Bl[Wl]=null,Ql=Bl[--Wl],Bl[Wl]=null;for(;e===Xl;)Xl=Kl[--ql],Kl[ql]=null,Gl=Kl[--ql],Kl[ql]=null,Yl=Kl[--ql],Kl[ql]=null}var na=null,ra=null,la=!1,aa=null;function oa(e,t){var n=Os(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function ua(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,na=e,ra=sl(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,na=e,ra=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Xl?{id:Yl,overflow:Gl}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Os(18,null,null,0)).stateNode=t,n.return=e,e.child=n,na=e,ra=null,!0);default:return!1}}function ia(e){return!(!(1&e.mode)||128&e.flags)}function sa(e){if(la){var t=ra;if(t){var n=t;if(!ua(e,t)){if(ia(e))throw Error(a(418));t=sl(n.nextSibling);var r=na;t&&ua(e,t)?oa(r,n):(e.flags=-4097&e.flags|2,la=!1,na=e)}}else{if(ia(e))throw Error(a(418));e.flags=-4097&e.flags|2,la=!1,na=e}}}function ca(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;na=e}function fa(e){if(e!==na)return!1;if(!la)return ca(e),la=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!nl(e.type,e.memoizedProps)),t&&(t=ra)){if(ia(e))throw da(),Error(a(418));for(;t;)oa(e,t),t=sl(t.nextSibling)}if(ca(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ra=sl(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ra=null}}else ra=na?sl(e.stateNode.nextSibling):null;return!0}function da(){for(var e=ra;e;)e=sl(e.nextSibling)}function pa(){ra=na=null,la=!1}function ha(e){null===aa?aa=[e]:aa.push(e)}var ma=w.ReactCurrentBatchConfig;function ya(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var l=r,o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=l.refs;null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function va(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function ga(e){return(0,e._init)(e._payload)}function ba(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function l(e,t){return(e=Rs(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function u(t){return e&&null===t.alternate&&(t.flags|=2),t}function i(e,t,n,r){return null===t||6!==t.tag?((t=Ds(n,e.mode,r)).return=e,t):((t=l(t,n)).return=e,t)}function s(e,t,n,r){var a=n.type;return a===_?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===L&&ga(a)===t.type)?((r=l(t,n.props)).ref=ya(e,t,n),r.return=e,r):((r=Ms(n.type,n.key,n.props,null,e.mode,r)).ref=ya(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=js(n,e.mode,r)).return=e,t):((t=l(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Is(n,e.mode,r,a)).return=e,t):((t=l(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Ds(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=Ms(t.type,t.key,t.props,null,e.mode,n)).ref=ya(e,null,t),n.return=e,n;case S:return(t=js(t,e.mode,n)).return=e,t;case L:return d(e,(0,t._init)(t._payload),n)}if(te(t)||I(t))return(t=Is(t,e.mode,n,null)).return=e,t;va(e,t)}return null}function p(e,t,n,r){var l=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==l?null:i(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===l?s(e,t,n,r):null;case S:return n.key===l?c(e,t,n,r):null;case L:return p(e,t,(l=n._init)(n._payload),r)}if(te(n)||I(n))return null!==l?null:f(e,t,n,r,null);va(e,n)}return null}function h(e,t,n,r,l){if("string"==typeof r&&""!==r||"number"==typeof r)return i(t,e=e.get(n)||null,""+r,l);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return s(t,e=e.get(null===r.key?n:r.key)||null,r,l);case S:return c(t,e=e.get(null===r.key?n:r.key)||null,r,l);case L:return h(e,t,n,(0,r._init)(r._payload),l)}if(te(r)||I(r))return f(t,e=e.get(n)||null,r,l,null);va(t,r)}return null}function m(l,a,u,i){for(var s=null,c=null,f=a,m=a=0,y=null;null!==f&&m<u.length;m++){f.index>m?(y=f,f=null):y=f.sibling;var v=p(l,f,u[m],i);if(null===v){null===f&&(f=y);break}e&&f&&null===v.alternate&&t(l,f),a=o(v,a,m),null===c?s=v:c.sibling=v,c=v,f=y}if(m===u.length)return n(l,f),la&&Zl(l,m),s;if(null===f){for(;m<u.length;m++)null!==(f=d(l,u[m],i))&&(a=o(f,a,m),null===c?s=f:c.sibling=f,c=f);return la&&Zl(l,m),s}for(f=r(l,f);m<u.length;m++)null!==(y=h(f,l,m,u[m],i))&&(e&&null!==y.alternate&&f.delete(null===y.key?m:y.key),a=o(y,a,m),null===c?s=y:c.sibling=y,c=y);return e&&f.forEach((function(e){return t(l,e)})),la&&Zl(l,m),s}function y(l,u,i,s){var c=I(i);if("function"!=typeof c)throw Error(a(150));if(null==(i=c.call(i)))throw Error(a(151));for(var f=c=null,m=u,y=u=0,v=null,g=i.next();null!==m&&!g.done;y++,g=i.next()){m.index>y?(v=m,m=null):v=m.sibling;var b=p(l,m,g.value,s);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(l,m),u=o(b,u,y),null===f?c=b:f.sibling=b,f=b,m=v}if(g.done)return n(l,m),la&&Zl(l,y),c;if(null===m){for(;!g.done;y++,g=i.next())null!==(g=d(l,g.value,s))&&(u=o(g,u,y),null===f?c=g:f.sibling=g,f=g);return la&&Zl(l,y),c}for(m=r(l,m);!g.done;y++,g=i.next())null!==(g=h(m,l,y,g.value,s))&&(e&&null!==g.alternate&&m.delete(null===g.key?y:g.key),u=o(g,u,y),null===f?c=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(l,e)})),la&&Zl(l,y),c}return function e(r,a,o,i){if("object"==typeof o&&null!==o&&o.type===_&&null===o.key&&(o=o.props.children),"object"==typeof o&&null!==o){switch(o.$$typeof){case k:e:{for(var s=o.key,c=a;null!==c;){if(c.key===s){if((s=o.type)===_){if(7===c.tag){n(r,c.sibling),(a=l(c,o.props.children)).return=r,r=a;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===L&&ga(s)===c.type){n(r,c.sibling),(a=l(c,o.props)).ref=ya(r,c,o),a.return=r,r=a;break e}n(r,c);break}t(r,c),c=c.sibling}o.type===_?((a=Is(o.props.children,r.mode,i,o.key)).return=r,r=a):((i=Ms(o.type,o.key,o.props,null,r.mode,i)).ref=ya(r,a,o),i.return=r,r=i)}return u(r);case S:e:{for(c=o.key;null!==a;){if(a.key===c){if(4===a.tag&&a.stateNode.containerInfo===o.containerInfo&&a.stateNode.implementation===o.implementation){n(r,a.sibling),(a=l(a,o.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=js(o,r.mode,i)).return=r,r=a}return u(r);case L:return e(r,a,(c=o._init)(o._payload),i)}if(te(o))return m(r,a,o,i);if(I(o))return y(r,a,o,i);va(r,o)}return"string"==typeof o&&""!==o||"number"==typeof o?(o=""+o,null!==a&&6===a.tag?(n(r,a.sibling),(a=l(a,o)).return=r,r=a):(n(r,a),(a=Ds(o,r.mode,i)).return=r,r=a),u(r)):n(r,a)}}var wa=ba(!0),ka=ba(!1),Sa=xl(null),_a=null,xa=null,Ea=null;function Ca(){Ea=xa=_a=null}function Na(e){var t=Sa.current;El(Sa),e._currentValue=t}function Pa(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function za(e,t){_a=e,Ea=xa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&t)&&(bu=!0),e.firstContext=null)}function Ta(e){var t=e._currentValue;if(Ea!==e)if(e={context:e,memoizedValue:t,next:null},null===xa){if(null===_a)throw Error(a(308));xa=e,_a.dependencies={lanes:0,firstContext:e}}else xa=xa.next=e;return t}var Oa=null;function La(e){null===Oa?Oa=[e]:Oa.push(e)}function Ra(e,t,n,r){var l=t.interleaved;return null===l?(n.next=n,La(t)):(n.next=l.next,l.next=n),t.interleaved=n,Ma(e,r)}function Ma(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Ia=!1;function Fa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Da(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ja(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Aa(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Pi){var l=r.pending;return null===l?t.next=t:(t.next=l.next,l.next=t),r.pending=t,Ma(e,n)}return null===(l=r.interleaved)?(t.next=t,La(r)):(t.next=l.next,l.next=t),r.interleaved=t,Ma(e,n)}function Ua(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}function $a(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var l=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var o={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?l=a=o:a=a.next=o,n=n.next}while(null!==n);null===a?l=a=t:a=a.next=t}else l=a=t;return n={baseState:r.baseState,firstBaseUpdate:l,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Va(e,t,n,r){var l=e.updateQueue;Ia=!1;var a=l.firstBaseUpdate,o=l.lastBaseUpdate,u=l.shared.pending;if(null!==u){l.shared.pending=null;var i=u,s=i.next;i.next=null,null===o?a=s:o.next=s,o=i;var c=e.alternate;null!==c&&(u=(c=c.updateQueue).lastBaseUpdate)!==o&&(null===u?c.firstBaseUpdate=s:u.next=s,c.lastBaseUpdate=i)}if(null!==a){var f=l.baseState;for(o=0,c=s=i=null,u=a;;){var d=u.lane,p=u.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:u.tag,payload:u.payload,callback:u.callback,next:null});e:{var h=e,m=u;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=D({},f,d);break e;case 2:Ia=!0}}null!==u.callback&&0!==u.lane&&(e.flags|=64,null===(d=l.effects)?l.effects=[u]:d.push(u))}else p={eventTime:p,lane:d,tag:u.tag,payload:u.payload,callback:u.callback,next:null},null===c?(s=c=p,i=f):c=c.next=p,o|=d;if(null===(u=u.next)){if(null===(u=l.shared.pending))break;u=(d=u).next,d.next=null,l.lastBaseUpdate=d,l.shared.pending=null}}if(null===c&&(i=f),l.baseState=i,l.firstBaseUpdate=s,l.lastBaseUpdate=c,null!==(t=l.shared.interleaved)){l=t;do{o|=l.lane,l=l.next}while(l!==t)}else null===a&&(l.shared.lanes=0);Fi|=o,e.lanes=o,e.memoizedState=f}}function Ba(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],l=r.callback;if(null!==l){if(r.callback=null,r=n,"function"!=typeof l)throw Error(a(191,l));l.call(r)}}}var Wa={},Ha=xl(Wa),Qa=xl(Wa),Ka=xl(Wa);function qa(e){if(e===Wa)throw Error(a(174));return e}function Xa(e,t){switch(Cl(Ka,t),Cl(Qa,e),Cl(Ha,Wa),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ie(null,"");break;default:t=ie(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}El(Ha),Cl(Ha,t)}function Ya(){El(Ha),El(Qa),El(Ka)}function Ga(e){qa(Ka.current);var t=qa(Ha.current),n=ie(t,e.type);t!==n&&(Cl(Qa,e),Cl(Ha,n))}function Za(e){Qa.current===e&&(El(Ha),El(Qa))}var Ja=xl(0);function eo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var to=[];function no(){for(var e=0;e<to.length;e++)to[e]._workInProgressVersionPrimary=null;to.length=0}var ro=w.ReactCurrentDispatcher,lo=w.ReactCurrentBatchConfig,ao=0,oo=null,uo=null,io=null,so=!1,co=!1,fo=0,po=0;function ho(){throw Error(a(321))}function mo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ur(e[n],t[n]))return!1;return!0}function yo(e,t,n,r,l,o){if(ao=o,oo=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ro.current=null===e||null===e.memoizedState?Jo:eu,e=n(r,l),co){o=0;do{if(co=!1,fo=0,25<=o)throw Error(a(301));o+=1,io=uo=null,t.updateQueue=null,ro.current=tu,e=n(r,l)}while(co)}if(ro.current=Zo,t=null!==uo&&null!==uo.next,ao=0,io=uo=oo=null,so=!1,t)throw Error(a(300));return e}function vo(){var e=0!==fo;return fo=0,e}function go(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===io?oo.memoizedState=io=e:io=io.next=e,io}function bo(){if(null===uo){var e=oo.alternate;e=null!==e?e.memoizedState:null}else e=uo.next;var t=null===io?oo.memoizedState:io.next;if(null!==t)io=t,uo=e;else{if(null===e)throw Error(a(310));e={memoizedState:(uo=e).memoizedState,baseState:uo.baseState,baseQueue:uo.baseQueue,queue:uo.queue,next:null},null===io?oo.memoizedState=io=e:io=io.next=e}return io}function wo(e,t){return"function"==typeof t?t(e):t}function ko(e){var t=bo(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=uo,l=r.baseQueue,o=n.pending;if(null!==o){if(null!==l){var u=l.next;l.next=o.next,o.next=u}r.baseQueue=l=o,n.pending=null}if(null!==l){o=l.next,r=r.baseState;var i=u=null,s=null,c=o;do{var f=c.lane;if((ao&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(i=s=d,u=r):s=s.next=d,oo.lanes|=f,Fi|=f}c=c.next}while(null!==c&&c!==o);null===s?u=r:s.next=i,ur(r,t.memoizedState)||(bu=!0),t.memoizedState=r,t.baseState=u,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){l=e;do{o=l.lane,oo.lanes|=o,Fi|=o,l=l.next}while(l!==e)}else null===l&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function So(e){var t=bo(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,l=n.pending,o=t.memoizedState;if(null!==l){n.pending=null;var u=l=l.next;do{o=e(o,u.action),u=u.next}while(u!==l);ur(o,t.memoizedState)||(bu=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function _o(){}function xo(e,t){var n=oo,r=bo(),l=t(),o=!ur(r.memoizedState,l);if(o&&(r.memoizedState=l,bu=!0),r=r.queue,Fo(No.bind(null,n,r,e),[e]),r.getSnapshot!==t||o||null!==io&&1&io.memoizedState.tag){if(n.flags|=2048,Oo(9,Co.bind(null,n,r,l,t),void 0,null),null===zi)throw Error(a(349));30&ao||Eo(n,t,l)}return l}function Eo(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=oo.updateQueue)?(t={lastEffect:null,stores:null},oo.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Co(e,t,n,r){t.value=n,t.getSnapshot=r,Po(t)&&zo(e)}function No(e,t,n){return n((function(){Po(t)&&zo(e)}))}function Po(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!ur(e,n)}catch(e){return!0}}function zo(e){var t=Ma(e,1);null!==t&&ns(t,e,1,-1)}function To(e){var t=go();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:wo,lastRenderedState:e},t.queue=e,e=e.dispatch=qo.bind(null,oo,e),[t.memoizedState,e]}function Oo(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=oo.updateQueue)?(t={lastEffect:null,stores:null},oo.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Lo(){return bo().memoizedState}function Ro(e,t,n,r){var l=go();oo.flags|=e,l.memoizedState=Oo(1|t,n,void 0,void 0===r?null:r)}function Mo(e,t,n,r){var l=bo();r=void 0===r?null:r;var a=void 0;if(null!==uo){var o=uo.memoizedState;if(a=o.destroy,null!==r&&mo(r,o.deps))return void(l.memoizedState=Oo(t,n,a,r))}oo.flags|=e,l.memoizedState=Oo(1|t,n,a,r)}function Io(e,t){return Ro(8390656,8,e,t)}function Fo(e,t){return Mo(2048,8,e,t)}function Do(e,t){return Mo(4,2,e,t)}function jo(e,t){return Mo(4,4,e,t)}function Ao(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Uo(e,t,n){return n=null!=n?n.concat([e]):null,Mo(4,4,Ao.bind(null,t,e),n)}function $o(){}function Vo(e,t){var n=bo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&mo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Bo(e,t){var n=bo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&mo(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Wo(e,t,n){return 21&ao?(ur(n,t)||(n=mt(),oo.lanes|=n,Fi|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,bu=!0),e.memoizedState=n)}function Ho(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=lo.transition;lo.transition={};try{e(!1),t()}finally{bt=n,lo.transition=r}}function Qo(){return bo().memoizedState}function Ko(e,t,n){var r=ts(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Xo(e)?Yo(t,n):null!==(n=Ra(e,t,n,r))&&(ns(n,e,r,es()),Go(n,t,r))}function qo(e,t,n){var r=ts(e),l={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Xo(e))Yo(t,l);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var o=t.lastRenderedState,u=a(o,n);if(l.hasEagerState=!0,l.eagerState=u,ur(u,o)){var i=t.interleaved;return null===i?(l.next=l,La(t)):(l.next=i.next,i.next=l),void(t.interleaved=l)}}catch(e){}null!==(n=Ra(e,t,l,r))&&(ns(n,e,r,l=es()),Go(n,t,r))}}function Xo(e){var t=e.alternate;return e===oo||null!==t&&t===oo}function Yo(e,t){co=so=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Go(e,t,n){if(4194240&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}var Zo={readContext:Ta,useCallback:ho,useContext:ho,useEffect:ho,useImperativeHandle:ho,useInsertionEffect:ho,useLayoutEffect:ho,useMemo:ho,useReducer:ho,useRef:ho,useState:ho,useDebugValue:ho,useDeferredValue:ho,useTransition:ho,useMutableSource:ho,useSyncExternalStore:ho,useId:ho,unstable_isNewReconciler:!1},Jo={readContext:Ta,useCallback:function(e,t){return go().memoizedState=[e,void 0===t?null:t],e},useContext:Ta,useEffect:Io,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ro(4194308,4,Ao.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ro(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ro(4,2,e,t)},useMemo:function(e,t){var n=go();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=go();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Ko.bind(null,oo,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},go().memoizedState=e},useState:To,useDebugValue:$o,useDeferredValue:function(e){return go().memoizedState=e},useTransition:function(){var e=To(!1),t=e[0];return e=Ho.bind(null,e[1]),go().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=oo,l=go();if(la){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===zi)throw Error(a(349));30&ao||Eo(r,t,n)}l.memoizedState=n;var o={value:n,getSnapshot:t};return l.queue=o,Io(No.bind(null,r,o,e),[e]),r.flags|=2048,Oo(9,Co.bind(null,r,o,n,t),void 0,null),n},useId:function(){var e=go(),t=zi.identifierPrefix;if(la){var n=Gl;t=":"+t+"R"+(n=(Yl&~(1<<32-ot(Yl)-1)).toString(32)+n),0<(n=fo++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=po++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},eu={readContext:Ta,useCallback:Vo,useContext:Ta,useEffect:Fo,useImperativeHandle:Uo,useInsertionEffect:Do,useLayoutEffect:jo,useMemo:Bo,useReducer:ko,useRef:Lo,useState:function(){return ko(wo)},useDebugValue:$o,useDeferredValue:function(e){return Wo(bo(),uo.memoizedState,e)},useTransition:function(){return[ko(wo)[0],bo().memoizedState]},useMutableSource:_o,useSyncExternalStore:xo,useId:Qo,unstable_isNewReconciler:!1},tu={readContext:Ta,useCallback:Vo,useContext:Ta,useEffect:Fo,useImperativeHandle:Uo,useInsertionEffect:Do,useLayoutEffect:jo,useMemo:Bo,useReducer:So,useRef:Lo,useState:function(){return So(wo)},useDebugValue:$o,useDeferredValue:function(e){var t=bo();return null===uo?t.memoizedState=e:Wo(t,uo.memoizedState,e)},useTransition:function(){return[So(wo)[0],bo().memoizedState]},useMutableSource:_o,useSyncExternalStore:xo,useId:Qo,unstable_isNewReconciler:!1};function nu(e,t){if(e&&e.defaultProps){for(var n in t=D({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function ru(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:D({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var lu={isMounted:function(e){return!!(e=e._reactInternals)&&Ve(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=es(),l=ts(e),a=ja(r,l);a.payload=t,null!=n&&(a.callback=n),null!==(t=Aa(e,a,l))&&(ns(t,e,l,r),Ua(t,e,l))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=es(),l=ts(e),a=ja(r,l);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=Aa(e,a,l))&&(ns(t,e,l,r),Ua(t,e,l))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=es(),r=ts(e),l=ja(n,r);l.tag=2,null!=t&&(l.callback=t),null!==(t=Aa(e,l,r))&&(ns(t,e,r,n),Ua(t,e,r))}};function au(e,t,n,r,l,a,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,o):!(t.prototype&&t.prototype.isPureReactComponent&&ir(n,r)&&ir(l,a))}function ou(e,t,n){var r=!1,l=Nl,a=t.contextType;return"object"==typeof a&&null!==a?a=Ta(a):(l=Ll(t)?Tl:Pl.current,a=(r=null!=(r=t.contextTypes))?Ol(e,l):Nl),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=lu,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=l,e.__reactInternalMemoizedMaskedChildContext=a),t}function uu(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&lu.enqueueReplaceState(t,t.state,null)}function iu(e,t,n,r){var l=e.stateNode;l.props=n,l.state=e.memoizedState,l.refs={},Fa(e);var a=t.contextType;"object"==typeof a&&null!==a?l.context=Ta(a):(a=Ll(t)?Tl:Pl.current,l.context=Ol(e,a)),l.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(ru(e,t,a,n),l.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof l.getSnapshotBeforeUpdate||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||(t=l.state,"function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount(),t!==l.state&&lu.enqueueReplaceState(l,l.state,null),Va(e,n,l,r),l.state=e.memoizedState),"function"==typeof l.componentDidMount&&(e.flags|=4194308)}function su(e,t){try{var n="",r=t;do{n+=$(r),r=r.return}while(r);var l=n}catch(e){l="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:l,digest:null}}function cu(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fu(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var du="function"==typeof WeakMap?WeakMap:Map;function pu(e,t,n){(n=ja(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wi||(Wi=!0,Hi=r),fu(0,t)},n}function hu(e,t,n){(n=ja(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var l=t.value;n.payload=function(){return r(l)},n.callback=function(){fu(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){fu(0,t),"function"!=typeof r&&(null===Qi?Qi=new Set([this]):Qi.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function mu(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new du;var l=new Set;r.set(t,l)}else void 0===(l=r.get(t))&&(l=new Set,r.set(t,l));l.has(n)||(l.add(n),e=Es.bind(null,e,t,n),t.then(e,e))}function yu(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function vu(e,t,n,r,l){return 1&e.mode?(e.flags|=65536,e.lanes=l,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=ja(-1,1)).tag=2,Aa(n,t,1))),n.lanes|=1),e)}var gu=w.ReactCurrentOwner,bu=!1;function wu(e,t,n,r){t.child=null===e?ka(t,null,n,r):wa(t,e.child,n,r)}function ku(e,t,n,r,l){n=n.render;var a=t.ref;return za(t,l),r=yo(e,t,n,r,a,l),n=vo(),null===e||bu?(la&&n&&ea(t),t.flags|=1,wu(e,t,r,l),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~l,Wu(e,t,l))}function Su(e,t,n,r,l){if(null===e){var a=n.type;return"function"!=typeof a||Ls(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ms(n.type,null,r,t,t.mode,l)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,_u(e,t,a,r,l))}if(a=e.child,!(e.lanes&l)){var o=a.memoizedProps;if((n=null!==(n=n.compare)?n:ir)(o,r)&&e.ref===t.ref)return Wu(e,t,l)}return t.flags|=1,(e=Rs(a,r)).ref=t.ref,e.return=t,t.child=e}function _u(e,t,n,r,l){if(null!==e){var a=e.memoizedProps;if(ir(a,r)&&e.ref===t.ref){if(bu=!1,t.pendingProps=r=a,!(e.lanes&l))return t.lanes=e.lanes,Wu(e,t,l);131072&e.flags&&(bu=!0)}}return Cu(e,t,n,r,l)}function xu(e,t,n){var r=t.pendingProps,l=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&t.mode){if(!(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Cl(Ri,Li),Li|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:n,Cl(Ri,Li),Li|=r}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Cl(Ri,Li),Li|=n;else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,Cl(Ri,Li),Li|=r;return wu(e,t,l,n),t.child}function Eu(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Cu(e,t,n,r,l){var a=Ll(n)?Tl:Pl.current;return a=Ol(t,a),za(t,l),n=yo(e,t,n,r,a,l),r=vo(),null===e||bu?(la&&r&&ea(t),t.flags|=1,wu(e,t,n,l),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~l,Wu(e,t,l))}function Nu(e,t,n,r,l){if(Ll(n)){var a=!0;Fl(t)}else a=!1;if(za(t,l),null===t.stateNode)Bu(e,t),ou(t,n,r),iu(t,n,r,l),r=!0;else if(null===e){var o=t.stateNode,u=t.memoizedProps;o.props=u;var i=o.context,s=n.contextType;s="object"==typeof s&&null!==s?Ta(s):Ol(t,s=Ll(n)?Tl:Pl.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof o.getSnapshotBeforeUpdate;f||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(u!==r||i!==s)&&uu(t,o,r,s),Ia=!1;var d=t.memoizedState;o.state=d,Va(t,r,o,l),i=t.memoizedState,u!==r||d!==i||zl.current||Ia?("function"==typeof c&&(ru(t,n,c,r),i=t.memoizedState),(u=Ia||au(t,n,u,r,d,i,s))?(f||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.flags|=4194308)):("function"==typeof o.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=i),o.props=r,o.state=i,o.context=s,r=u):("function"==typeof o.componentDidMount&&(t.flags|=4194308),r=!1)}else{o=t.stateNode,Da(e,t),u=t.memoizedProps,s=t.type===t.elementType?u:nu(t.type,u),o.props=s,f=t.pendingProps,d=o.context,i="object"==typeof(i=n.contextType)&&null!==i?Ta(i):Ol(t,i=Ll(n)?Tl:Pl.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(u!==f||d!==i)&&uu(t,o,r,i),Ia=!1,d=t.memoizedState,o.state=d,Va(t,r,o,l);var h=t.memoizedState;u!==f||d!==h||zl.current||Ia?("function"==typeof p&&(ru(t,n,p,r),h=t.memoizedState),(s=Ia||au(t,n,s,r,d,h,i)||!1)?(c||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,h,i),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,h,i)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof o.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),o.props=r,o.state=h,o.context=i,r=s):("function"!=typeof o.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Pu(e,t,n,r,a,l)}function Pu(e,t,n,r,l,a){Eu(e,t);var o=!!(128&t.flags);if(!r&&!o)return l&&Dl(t,n,!1),Wu(e,t,a);r=t.stateNode,gu.current=t;var u=o&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&o?(t.child=wa(t,e.child,null,a),t.child=wa(t,null,u,a)):wu(e,t,u,a),t.memoizedState=r.state,l&&Dl(t,n,!0),t.child}function zu(e){var t=e.stateNode;t.pendingContext?Ml(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ml(0,t.context,!1),Xa(e,t.containerInfo)}function Tu(e,t,n,r,l){return pa(),ha(l),t.flags|=256,wu(e,t,n,r),t.child}var Ou,Lu,Ru,Mu,Iu={dehydrated:null,treeContext:null,retryLane:0};function Fu(e){return{baseLanes:e,cachePool:null,transitions:null}}function Du(e,t,n){var r,l=t.pendingProps,o=Ja.current,u=!1,i=!!(128&t.flags);if((r=i)||(r=(null===e||null!==e.memoizedState)&&!!(2&o)),r?(u=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(o|=1),Cl(Ja,1&o),null===e)return sa(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(i=l.children,e=l.fallback,u?(l=t.mode,u=t.child,i={mode:"hidden",children:i},1&l||null===u?u=Fs(i,l,0,null):(u.childLanes=0,u.pendingProps=i),e=Is(e,l,n,null),u.return=t,e.return=t,u.sibling=e,t.child=u,t.child.memoizedState=Fu(n),t.memoizedState=Iu,e):ju(t,i));if(null!==(o=e.memoizedState)&&null!==(r=o.dehydrated))return function(e,t,n,r,l,o,u){if(n)return 256&t.flags?(t.flags&=-257,Au(e,t,u,r=cu(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(o=r.fallback,l=t.mode,r=Fs({mode:"visible",children:r.children},l,0,null),(o=Is(o,l,u,null)).flags|=2,r.return=t,o.return=t,r.sibling=o,t.child=r,1&t.mode&&wa(t,e.child,null,u),t.child.memoizedState=Fu(u),t.memoizedState=Iu,o);if(!(1&t.mode))return Au(e,t,u,null);if("$!"===l.data){if(r=l.nextSibling&&l.nextSibling.dataset)var i=r.dgst;return r=i,Au(e,t,u,r=cu(o=Error(a(419)),r,void 0))}if(i=!!(u&e.childLanes),bu||i){if(null!==(r=zi)){switch(u&-u){case 4:l=2;break;case 16:l=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:l=32;break;case 536870912:l=268435456;break;default:l=0}0!==(l=l&(r.suspendedLanes|u)?0:l)&&l!==o.retryLane&&(o.retryLane=l,Ma(e,l),ns(r,e,l,-1))}return ms(),Au(e,t,u,r=cu(Error(a(421))))}return"$?"===l.data?(t.flags|=128,t.child=e.child,t=Ns.bind(null,e),l._reactRetry=t,null):(e=o.treeContext,ra=sl(l.nextSibling),na=t,la=!0,aa=null,null!==e&&(Kl[ql++]=Yl,Kl[ql++]=Gl,Kl[ql++]=Xl,Yl=e.id,Gl=e.overflow,Xl=t),(t=ju(t,r.children)).flags|=4096,t)}(e,t,i,l,r,o,n);if(u){u=l.fallback,i=t.mode,r=(o=e.child).sibling;var s={mode:"hidden",children:l.children};return 1&i||t.child===o?(l=Rs(o,s)).subtreeFlags=14680064&o.subtreeFlags:((l=t.child).childLanes=0,l.pendingProps=s,t.deletions=null),null!==r?u=Rs(r,u):(u=Is(u,i,n,null)).flags|=2,u.return=t,l.return=t,l.sibling=u,t.child=l,l=u,u=t.child,i=null===(i=e.child.memoizedState)?Fu(n):{baseLanes:i.baseLanes|n,cachePool:null,transitions:i.transitions},u.memoizedState=i,u.childLanes=e.childLanes&~n,t.memoizedState=Iu,l}return e=(u=e.child).sibling,l=Rs(u,{mode:"visible",children:l.children}),!(1&t.mode)&&(l.lanes=n),l.return=t,l.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=l,t.memoizedState=null,l}function ju(e,t){return(t=Fs({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Au(e,t,n,r){return null!==r&&ha(r),wa(t,e.child,null,n),(e=ju(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Uu(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Pa(e.return,t,n)}function $u(e,t,n,r,l){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:l}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=l)}function Vu(e,t,n){var r=t.pendingProps,l=r.revealOrder,a=r.tail;if(wu(e,t,r.children,n),2&(r=Ja.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Uu(e,n,t);else if(19===e.tag)Uu(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Cl(Ja,r),1&t.mode)switch(l){case"forwards":for(n=t.child,l=null;null!==n;)null!==(e=n.alternate)&&null===eo(e)&&(l=n),n=n.sibling;null===(n=l)?(l=t.child,t.child=null):(l=n.sibling,n.sibling=null),$u(t,!1,l,n,a);break;case"backwards":for(n=null,l=t.child,t.child=null;null!==l;){if(null!==(e=l.alternate)&&null===eo(e)){t.child=l;break}e=l.sibling,l.sibling=n,n=l,l=e}$u(t,!0,n,null,a);break;case"together":$u(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function Bu(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Wu(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Fi|=t.lanes,!(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Rs(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Rs(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Hu(e,t){if(!la)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Qu(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var l=e.child;null!==l;)n|=l.lanes|l.childLanes,r|=14680064&l.subtreeFlags,r|=14680064&l.flags,l.return=e,l=l.sibling;else for(l=e.child;null!==l;)n|=l.lanes|l.childLanes,r|=l.subtreeFlags,r|=l.flags,l.return=e,l=l.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Ku(e,t,n){var r=t.pendingProps;switch(ta(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Qu(t),null;case 1:case 17:return Ll(t.type)&&Rl(),Qu(t),null;case 3:return r=t.stateNode,Ya(),El(zl),El(Pl),no(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fa(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==aa&&(os(aa),aa=null))),Lu(e,t),Qu(t),null;case 5:Za(t);var l=qa(Ka.current);if(n=t.type,null!==e&&null!=t.stateNode)Ru(e,t,n,r,l),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return Qu(t),null}if(e=qa(Ha.current),fa(t)){r=t.stateNode,n=t.type;var o=t.memoizedProps;switch(r[dl]=t,r[pl]=o,e=!!(1&t.mode),n){case"dialog":Ar("cancel",r),Ar("close",r);break;case"iframe":case"object":case"embed":Ar("load",r);break;case"video":case"audio":for(l=0;l<Ir.length;l++)Ar(Ir[l],r);break;case"source":Ar("error",r);break;case"img":case"image":case"link":Ar("error",r),Ar("load",r);break;case"details":Ar("toggle",r);break;case"input":Y(r,o),Ar("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!o.multiple},Ar("invalid",r);break;case"textarea":le(r,o),Ar("invalid",r)}for(var i in ge(n,o),l=null,o)if(o.hasOwnProperty(i)){var s=o[i];"children"===i?"string"==typeof s?r.textContent!==s&&(!0!==o.suppressHydrationWarning&&Zr(r.textContent,s,e),l=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==o.suppressHydrationWarning&&Zr(r.textContent,s,e),l=["children",""+s]):u.hasOwnProperty(i)&&null!=s&&"onScroll"===i&&Ar("scroll",r)}switch(n){case"input":Q(r),J(r,o,!0);break;case"textarea":Q(r),oe(r);break;case"select":case"option":break;default:"function"==typeof o.onClick&&(r.onclick=Jr)}r=l,t.updateQueue=r,null!==r&&(t.flags|=4)}else{i=9===l.nodeType?l:l.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ue(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=i.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=i.createElement(n,{is:r.is}):(e=i.createElement(n),"select"===n&&(i=e,r.multiple?i.multiple=!0:r.size&&(i.size=r.size))):e=i.createElementNS(e,n),e[dl]=t,e[pl]=r,Ou(e,t,!1,!1),t.stateNode=e;e:{switch(i=be(n,r),n){case"dialog":Ar("cancel",e),Ar("close",e),l=r;break;case"iframe":case"object":case"embed":Ar("load",e),l=r;break;case"video":case"audio":for(l=0;l<Ir.length;l++)Ar(Ir[l],e);l=r;break;case"source":Ar("error",e),l=r;break;case"img":case"image":case"link":Ar("error",e),Ar("load",e),l=r;break;case"details":Ar("toggle",e),l=r;break;case"input":Y(e,r),l=X(e,r),Ar("invalid",e);break;case"option":default:l=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},l=D({},r,{value:void 0}),Ar("invalid",e);break;case"textarea":le(e,r),l=re(e,r),Ar("invalid",e)}for(o in ge(n,l),s=l)if(s.hasOwnProperty(o)){var c=s[o];"style"===o?ye(e,c):"dangerouslySetInnerHTML"===o?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===o?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==o&&"suppressHydrationWarning"!==o&&"autoFocus"!==o&&(u.hasOwnProperty(o)?null!=c&&"onScroll"===o&&Ar("scroll",e):null!=c&&b(e,o,c,i))}switch(n){case"input":Q(e),J(e,r,!1);break;case"textarea":Q(e),oe(e);break;case"option":null!=r.value&&e.setAttribute("value",""+W(r.value));break;case"select":e.multiple=!!r.multiple,null!=(o=r.value)?ne(e,!!r.multiple,o,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof l.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Qu(t),null;case 6:if(e&&null!=t.stateNode)Mu(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=qa(Ka.current),qa(Ha.current),fa(t)){if(r=t.stateNode,n=t.memoizedProps,r[dl]=t,(o=r.nodeValue!==n)&&null!==(e=na))switch(e.tag){case 3:Zr(r.nodeValue,n,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Zr(r.nodeValue,n,!!(1&e.mode))}o&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[dl]=t,t.stateNode=r}return Qu(t),null;case 13:if(El(Ja),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(la&&null!==ra&&1&t.mode&&!(128&t.flags))da(),pa(),t.flags|=98560,o=!1;else if(o=fa(t),null!==r&&null!==r.dehydrated){if(null===e){if(!o)throw Error(a(318));if(!(o=null!==(o=t.memoizedState)?o.dehydrated:null))throw Error(a(317));o[dl]=t}else pa(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Qu(t),o=!1}else null!==aa&&(os(aa),aa=null),o=!0;if(!o)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,1&t.mode&&(null===e||1&Ja.current?0===Mi&&(Mi=3):ms())),null!==t.updateQueue&&(t.flags|=4),Qu(t),null);case 4:return Ya(),Lu(e,t),null===e&&Vr(t.stateNode.containerInfo),Qu(t),null;case 10:return Na(t.type._context),Qu(t),null;case 19:if(El(Ja),null===(o=t.memoizedState))return Qu(t),null;if(r=!!(128&t.flags),null===(i=o.rendering))if(r)Hu(o,!1);else{if(0!==Mi||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(i=eo(e))){for(t.flags|=128,Hu(o,!1),null!==(r=i.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(o=n).flags&=14680066,null===(i=o.alternate)?(o.childLanes=0,o.lanes=e,o.child=null,o.subtreeFlags=0,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null,o.stateNode=null):(o.childLanes=i.childLanes,o.lanes=i.lanes,o.child=i.child,o.subtreeFlags=0,o.deletions=null,o.memoizedProps=i.memoizedProps,o.memoizedState=i.memoizedState,o.updateQueue=i.updateQueue,o.type=i.type,e=i.dependencies,o.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Cl(Ja,1&Ja.current|2),t.child}e=e.sibling}null!==o.tail&&Ge()>Vi&&(t.flags|=128,r=!0,Hu(o,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=eo(i))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Hu(o,!0),null===o.tail&&"hidden"===o.tailMode&&!i.alternate&&!la)return Qu(t),null}else 2*Ge()-o.renderingStartTime>Vi&&1073741824!==n&&(t.flags|=128,r=!0,Hu(o,!1),t.lanes=4194304);o.isBackwards?(i.sibling=t.child,t.child=i):(null!==(n=o.last)?n.sibling=i:t.child=i,o.last=i)}return null!==o.tail?(t=o.tail,o.rendering=t,o.tail=t.sibling,o.renderingStartTime=Ge(),t.sibling=null,n=Ja.current,Cl(Ja,r?1&n|2:1&n),t):(Qu(t),null);case 22:case 23:return fs(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&1&t.mode?!!(1073741824&Li)&&(Qu(t),6&t.subtreeFlags&&(t.flags|=8192)):Qu(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function qu(e,t){switch(ta(t),t.tag){case 1:return Ll(t.type)&&Rl(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Ya(),El(zl),El(Pl),no(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Za(t),null;case 13:if(El(Ja),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));pa()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return El(Ja),null;case 4:return Ya(),null;case 10:return Na(t.type._context),null;case 22:case 23:return fs(),null;default:return null}}Ou=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Lu=function(){},Ru=function(e,t,n,r){var l=e.memoizedProps;if(l!==r){e=t.stateNode,qa(Ha.current);var a,o=null;switch(n){case"input":l=X(e,l),r=X(e,r),o=[];break;case"select":l=D({},l,{value:void 0}),r=D({},r,{value:void 0}),o=[];break;case"textarea":l=re(e,l),r=re(e,r),o=[];break;default:"function"!=typeof l.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in ge(n,r),n=null,l)if(!r.hasOwnProperty(c)&&l.hasOwnProperty(c)&&null!=l[c])if("style"===c){var i=l[c];for(a in i)i.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(u.hasOwnProperty(c)?o||(o=[]):(o=o||[]).push(c,null));for(c in r){var s=r[c];if(i=null!=l?l[c]:void 0,r.hasOwnProperty(c)&&s!==i&&(null!=s||null!=i))if("style"===c)if(i){for(a in i)!i.hasOwnProperty(a)||s&&s.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in s)s.hasOwnProperty(a)&&i[a]!==s[a]&&(n||(n={}),n[a]=s[a])}else n||(o||(o=[]),o.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,i=i?i.__html:void 0,null!=s&&i!==s&&(o=o||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(o=o||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(u.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Ar("scroll",e),o||i===s||(o=[])):(o=o||[]).push(c,s))}n&&(o=o||[]).push("style",n);var c=o;(t.updateQueue=c)&&(t.flags|=4)}},Mu=function(e,t,n,r){n!==r&&(t.flags|=4)};var Xu=!1,Yu=!1,Gu="function"==typeof WeakSet?WeakSet:Set,Zu=null;function Ju(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){xs(e,t,n)}else n.current=null}function ei(e,t,n){try{n()}catch(n){xs(e,t,n)}}var ti=!1;function ni(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var l=r=r.next;do{if((l.tag&e)===e){var a=l.destroy;l.destroy=void 0,void 0!==a&&ei(t,n,a)}l=l.next}while(l!==r)}}function ri(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function li(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function ai(e){var t=e.alternate;null!==t&&(e.alternate=null,ai(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[dl],delete t[pl],delete t[ml],delete t[yl],delete t[vl]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function oi(e){return 5===e.tag||3===e.tag||4===e.tag}function ui(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||oi(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ii(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(ii(e,t,n),e=e.sibling;null!==e;)ii(e,t,n),e=e.sibling}function si(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(si(e,t,n),e=e.sibling;null!==e;)si(e,t,n),e=e.sibling}var ci=null,fi=!1;function di(e,t,n){for(n=n.child;null!==n;)pi(e,t,n),n=n.sibling}function pi(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(lt,n)}catch(e){}switch(n.tag){case 5:Yu||Ju(n,t);case 6:var r=ci,l=fi;ci=null,di(e,t,n),fi=l,null!==(ci=r)&&(fi?(e=ci,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):ci.removeChild(n.stateNode));break;case 18:null!==ci&&(fi?(e=ci,n=n.stateNode,8===e.nodeType?il(e.parentNode,n):1===e.nodeType&&il(e,n),Vt(e)):il(ci,n.stateNode));break;case 4:r=ci,l=fi,ci=n.stateNode.containerInfo,fi=!0,di(e,t,n),ci=r,fi=l;break;case 0:case 11:case 14:case 15:if(!Yu&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){l=r=r.next;do{var a=l,o=a.destroy;a=a.tag,void 0!==o&&(2&a||4&a)&&ei(n,t,o),l=l.next}while(l!==r)}di(e,t,n);break;case 1:if(!Yu&&(Ju(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){xs(n,t,e)}di(e,t,n);break;case 21:di(e,t,n);break;case 22:1&n.mode?(Yu=(r=Yu)||null!==n.memoizedState,di(e,t,n),Yu=r):di(e,t,n);break;default:di(e,t,n)}}function hi(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Gu),t.forEach((function(t){var r=Ps.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function mi(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var l=n[r];try{var o=e,u=t,i=u;e:for(;null!==i;){switch(i.tag){case 5:ci=i.stateNode,fi=!1;break e;case 3:case 4:ci=i.stateNode.containerInfo,fi=!0;break e}i=i.return}if(null===ci)throw Error(a(160));pi(o,u,l),ci=null,fi=!1;var s=l.alternate;null!==s&&(s.return=null),l.return=null}catch(e){xs(l,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)yi(t,e),t=t.sibling}function yi(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(mi(t,e),vi(e),4&r){try{ni(3,e,e.return),ri(3,e)}catch(t){xs(e,e.return,t)}try{ni(5,e,e.return)}catch(t){xs(e,e.return,t)}}break;case 1:mi(t,e),vi(e),512&r&&null!==n&&Ju(n,n.return);break;case 5:if(mi(t,e),vi(e),512&r&&null!==n&&Ju(n,n.return),32&e.flags){var l=e.stateNode;try{de(l,"")}catch(t){xs(e,e.return,t)}}if(4&r&&null!=(l=e.stateNode)){var o=e.memoizedProps,u=null!==n?n.memoizedProps:o,i=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===i&&"radio"===o.type&&null!=o.name&&G(l,o),be(i,u);var c=be(i,o);for(u=0;u<s.length;u+=2){var f=s[u],d=s[u+1];"style"===f?ye(l,d):"dangerouslySetInnerHTML"===f?fe(l,d):"children"===f?de(l,d):b(l,f,d,c)}switch(i){case"input":Z(l,o);break;case"textarea":ae(l,o);break;case"select":var p=l._wrapperState.wasMultiple;l._wrapperState.wasMultiple=!!o.multiple;var h=o.value;null!=h?ne(l,!!o.multiple,h,!1):p!==!!o.multiple&&(null!=o.defaultValue?ne(l,!!o.multiple,o.defaultValue,!0):ne(l,!!o.multiple,o.multiple?[]:"",!1))}l[pl]=o}catch(t){xs(e,e.return,t)}}break;case 6:if(mi(t,e),vi(e),4&r){if(null===e.stateNode)throw Error(a(162));l=e.stateNode,o=e.memoizedProps;try{l.nodeValue=o}catch(t){xs(e,e.return,t)}}break;case 3:if(mi(t,e),vi(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Vt(t.containerInfo)}catch(t){xs(e,e.return,t)}break;case 4:default:mi(t,e),vi(e);break;case 13:mi(t,e),vi(e),8192&(l=e.child).flags&&(o=null!==l.memoizedState,l.stateNode.isHidden=o,!o||null!==l.alternate&&null!==l.alternate.memoizedState||($i=Ge())),4&r&&hi(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Yu=(c=Yu)||f,mi(t,e),Yu=c):mi(t,e),vi(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&1&e.mode)for(Zu=e,f=e.child;null!==f;){for(d=Zu=f;null!==Zu;){switch(h=(p=Zu).child,p.tag){case 0:case 11:case 14:case 15:ni(4,p,p.return);break;case 1:Ju(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){xs(r,n,e)}}break;case 5:Ju(p,p.return);break;case 22:if(null!==p.memoizedState){ki(d);continue}}null!==h?(h.return=p,Zu=h):ki(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{l=d.stateNode,c?"function"==typeof(o=l.style).setProperty?o.setProperty("display","none","important"):o.display="none":(i=d.stateNode,u=null!=(s=d.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,i.style.display=me("display",u))}catch(t){xs(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(t){xs(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:mi(t,e),vi(e),4&r&&hi(e);case 21:}}function vi(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(oi(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var l=r.stateNode;32&r.flags&&(de(l,""),r.flags&=-33),si(e,ui(e),l);break;case 3:case 4:var o=r.stateNode.containerInfo;ii(e,ui(e),o);break;default:throw Error(a(161))}}catch(t){xs(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function gi(e,t,n){Zu=e,bi(e,t,n)}function bi(e,t,n){for(var r=!!(1&e.mode);null!==Zu;){var l=Zu,a=l.child;if(22===l.tag&&r){var o=null!==l.memoizedState||Xu;if(!o){var u=l.alternate,i=null!==u&&null!==u.memoizedState||Yu;u=Xu;var s=Yu;if(Xu=o,(Yu=i)&&!s)for(Zu=l;null!==Zu;)i=(o=Zu).child,22===o.tag&&null!==o.memoizedState?Si(l):null!==i?(i.return=o,Zu=i):Si(l);for(;null!==a;)Zu=a,bi(a,t,n),a=a.sibling;Zu=l,Xu=u,Yu=s}wi(e)}else 8772&l.subtreeFlags&&null!==a?(a.return=l,Zu=a):wi(e)}}function wi(e){for(;null!==Zu;){var t=Zu;if(8772&t.flags){var n=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Yu||ri(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Yu)if(null===n)r.componentDidMount();else{var l=t.elementType===t.type?n.memoizedProps:nu(t.type,n.memoizedProps);r.componentDidUpdate(l,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var o=t.updateQueue;null!==o&&Ba(t,o,r);break;case 3:var u=t.updateQueue;if(null!==u){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Ba(t,u,n)}break;case 5:var i=t.stateNode;if(null===n&&4&t.flags){n=i;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Vt(d)}}}break;default:throw Error(a(163))}Yu||512&t.flags&&li(t)}catch(e){xs(t,t.return,e)}}if(t===e){Zu=null;break}if(null!==(n=t.sibling)){n.return=t.return,Zu=n;break}Zu=t.return}}function ki(e){for(;null!==Zu;){var t=Zu;if(t===e){Zu=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Zu=n;break}Zu=t.return}}function Si(e){for(;null!==Zu;){var t=Zu;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ri(4,t)}catch(e){xs(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var l=t.return;try{r.componentDidMount()}catch(e){xs(t,l,e)}}var a=t.return;try{li(t)}catch(e){xs(t,a,e)}break;case 5:var o=t.return;try{li(t)}catch(e){xs(t,o,e)}}}catch(e){xs(t,t.return,e)}if(t===e){Zu=null;break}var u=t.sibling;if(null!==u){u.return=t.return,Zu=u;break}Zu=t.return}}var _i,xi=Math.ceil,Ei=w.ReactCurrentDispatcher,Ci=w.ReactCurrentOwner,Ni=w.ReactCurrentBatchConfig,Pi=0,zi=null,Ti=null,Oi=0,Li=0,Ri=xl(0),Mi=0,Ii=null,Fi=0,Di=0,ji=0,Ai=null,Ui=null,$i=0,Vi=1/0,Bi=null,Wi=!1,Hi=null,Qi=null,Ki=!1,qi=null,Xi=0,Yi=0,Gi=null,Zi=-1,Ji=0;function es(){return 6&Pi?Ge():-1!==Zi?Zi:Zi=Ge()}function ts(e){return 1&e.mode?2&Pi&&0!==Oi?Oi&-Oi:null!==ma.transition?(0===Ji&&(Ji=mt()),Ji):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Yt(e.type):1}function ns(e,t,n,r){if(50<Yi)throw Yi=0,Gi=null,Error(a(185));vt(e,n,r),2&Pi&&e===zi||(e===zi&&(!(2&Pi)&&(Di|=n),4===Mi&&us(e,Oi)),rs(e,r),1===n&&0===Pi&&!(1&t.mode)&&(Vi=Ge()+500,Al&&Vl()))}function rs(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,l=e.expirationTimes,a=e.pendingLanes;0<a;){var o=31-ot(a),u=1<<o,i=l[o];-1===i?u&n&&!(u&r)||(l[o]=pt(u,t)):i<=t&&(e.expiredLanes|=u),a&=~u}}(e,t);var r=dt(e,e===zi?Oi:0);if(0===r)null!==n&&qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&qe(n),1===t)0===e.tag?function(e){Al=!0,$l(e)}(is.bind(null,e)):$l(is.bind(null,e)),ol((function(){!(6&Pi)&&Vl()})),n=null;else{switch(wt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=zs(n,ls.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function ls(e,t){if(Zi=-1,Ji=0,6&Pi)throw Error(a(327));var n=e.callbackNode;if(Ss()&&e.callbackNode!==n)return null;var r=dt(e,e===zi?Oi:0);if(0===r)return null;if(30&r||r&e.expiredLanes||t)t=ys(e,r);else{t=r;var l=Pi;Pi|=2;var o=hs();for(zi===e&&Oi===t||(Bi=null,Vi=Ge()+500,ds(e,t));;)try{gs();break}catch(t){ps(e,t)}Ca(),Ei.current=o,Pi=l,null!==Ti?t=0:(zi=null,Oi=0,t=Mi)}if(0!==t){if(2===t&&0!==(l=ht(e))&&(r=l,t=as(e,l)),1===t)throw n=Ii,ds(e,0),us(e,r),rs(e,Ge()),n;if(6===t)us(e,r);else{if(l=e.current.alternate,!(30&r||function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var l=n[r],a=l.getSnapshot;l=l.value;try{if(!ur(a(),l))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(l)||(t=ys(e,r),2===t&&(o=ht(e),0!==o&&(r=o,t=as(e,o))),1!==t)))throw n=Ii,ds(e,0),us(e,r),rs(e,Ge()),n;switch(e.finishedWork=l,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:ks(e,Ui,Bi);break;case 3:if(us(e,r),(130023424&r)===r&&10<(t=$i+500-Ge())){if(0!==dt(e,0))break;if(((l=e.suspendedLanes)&r)!==r){es(),e.pingedLanes|=e.suspendedLanes&l;break}e.timeoutHandle=rl(ks.bind(null,e,Ui,Bi),t);break}ks(e,Ui,Bi);break;case 4:if(us(e,r),(4194240&r)===r)break;for(t=e.eventTimes,l=-1;0<r;){var u=31-ot(r);o=1<<u,(u=t[u])>l&&(l=u),r&=~o}if(r=l,10<(r=(120>(r=Ge()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*xi(r/1960))-r)){e.timeoutHandle=rl(ks.bind(null,e,Ui,Bi),r);break}ks(e,Ui,Bi);break;default:throw Error(a(329))}}}return rs(e,Ge()),e.callbackNode===n?ls.bind(null,e):null}function as(e,t){var n=Ai;return e.current.memoizedState.isDehydrated&&(ds(e,t).flags|=256),2!==(e=ys(e,t))&&(t=Ui,Ui=n,null!==t&&os(t)),e}function os(e){null===Ui?Ui=e:Ui.push.apply(Ui,e)}function us(e,t){for(t&=~ji,t&=~Di,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-ot(t),r=1<<n;e[n]=-1,t&=~r}}function is(e){if(6&Pi)throw Error(a(327));Ss();var t=dt(e,0);if(!(1&t))return rs(e,Ge()),null;var n=ys(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=as(e,r))}if(1===n)throw n=Ii,ds(e,0),us(e,t),rs(e,Ge()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,ks(e,Ui,Bi),rs(e,Ge()),null}function ss(e,t){var n=Pi;Pi|=1;try{return e(t)}finally{0===(Pi=n)&&(Vi=Ge()+500,Al&&Vl())}}function cs(e){null!==qi&&0===qi.tag&&!(6&Pi)&&Ss();var t=Pi;Pi|=1;var n=Ni.transition,r=bt;try{if(Ni.transition=null,bt=1,e)return e()}finally{bt=r,Ni.transition=n,!(6&(Pi=t))&&Vl()}}function fs(){Li=Ri.current,El(Ri)}function ds(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,ll(n)),null!==Ti)for(n=Ti.return;null!==n;){var r=n;switch(ta(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Rl();break;case 3:Ya(),El(zl),El(Pl),no();break;case 5:Za(r);break;case 4:Ya();break;case 13:case 19:El(Ja);break;case 10:Na(r.type._context);break;case 22:case 23:fs()}n=n.return}if(zi=e,Ti=e=Rs(e.current,null),Oi=Li=t,Mi=0,Ii=null,ji=Di=Fi=0,Ui=Ai=null,null!==Oa){for(t=0;t<Oa.length;t++)if(null!==(r=(n=Oa[t]).interleaved)){n.interleaved=null;var l=r.next,a=n.pending;if(null!==a){var o=a.next;a.next=l,r.next=o}n.pending=r}Oa=null}return e}function ps(e,t){for(;;){var n=Ti;try{if(Ca(),ro.current=Zo,so){for(var r=oo.memoizedState;null!==r;){var l=r.queue;null!==l&&(l.pending=null),r=r.next}so=!1}if(ao=0,io=uo=oo=null,co=!1,fo=0,Ci.current=null,null===n||null===n.return){Mi=1,Ii=t,Ti=null;break}e:{var o=e,u=n.return,i=n,s=t;if(t=Oi,i.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=i,d=f.tag;if(!(1&f.mode||0!==d&&11!==d&&15!==d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=yu(u);if(null!==h){h.flags&=-257,vu(h,u,i,0,t),1&h.mode&&mu(o,c,t),s=c;var m=(t=h).updateQueue;if(null===m){var y=new Set;y.add(s),t.updateQueue=y}else m.add(s);break e}if(!(1&t)){mu(o,c,t),ms();break e}s=Error(a(426))}else if(la&&1&i.mode){var v=yu(u);if(null!==v){!(65536&v.flags)&&(v.flags|=256),vu(v,u,i,0,t),ha(su(s,i));break e}}o=s=su(s,i),4!==Mi&&(Mi=2),null===Ai?Ai=[o]:Ai.push(o),o=u;do{switch(o.tag){case 3:o.flags|=65536,t&=-t,o.lanes|=t,$a(o,pu(0,s,t));break e;case 1:i=s;var g=o.type,b=o.stateNode;if(!(128&o.flags||"function"!=typeof g.getDerivedStateFromError&&(null===b||"function"!=typeof b.componentDidCatch||null!==Qi&&Qi.has(b)))){o.flags|=65536,t&=-t,o.lanes|=t,$a(o,hu(o,i,t));break e}}o=o.return}while(null!==o)}ws(n)}catch(e){t=e,Ti===n&&null!==n&&(Ti=n=n.return);continue}break}}function hs(){var e=Ei.current;return Ei.current=Zo,null===e?Zo:e}function ms(){0!==Mi&&3!==Mi&&2!==Mi||(Mi=4),null===zi||!(268435455&Fi)&&!(268435455&Di)||us(zi,Oi)}function ys(e,t){var n=Pi;Pi|=2;var r=hs();for(zi===e&&Oi===t||(Bi=null,ds(e,t));;)try{vs();break}catch(t){ps(e,t)}if(Ca(),Pi=n,Ei.current=r,null!==Ti)throw Error(a(261));return zi=null,Oi=0,Mi}function vs(){for(;null!==Ti;)bs(Ti)}function gs(){for(;null!==Ti&&!Xe();)bs(Ti)}function bs(e){var t=_i(e.alternate,e,Li);e.memoizedProps=e.pendingProps,null===t?ws(e):Ti=t,Ci.current=null}function ws(e){var t=e;do{var n=t.alternate;if(e=t.return,32768&t.flags){if(null!==(n=qu(n,t)))return n.flags&=32767,void(Ti=n);if(null===e)return Mi=6,void(Ti=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(n=Ku(n,t,Li)))return void(Ti=n);if(null!==(t=t.sibling))return void(Ti=t);Ti=t=e}while(null!==t);0===Mi&&(Mi=5)}function ks(e,t,n){var r=bt,l=Ni.transition;try{Ni.transition=null,bt=1,function(e,t,n,r){do{Ss()}while(null!==qi);if(6&Pi)throw Error(a(327));n=e.finishedWork;var l=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var o=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var l=31-ot(n),a=1<<l;t[l]=0,r[l]=-1,e[l]=-1,n&=~a}}(e,o),e===zi&&(Ti=zi=null,Oi=0),!(2064&n.subtreeFlags)&&!(2064&n.flags)||Ki||(Ki=!0,zs(tt,(function(){return Ss(),null}))),o=!!(15990&n.flags),15990&n.subtreeFlags||o){o=Ni.transition,Ni.transition=null;var u=bt;bt=1;var i=Pi;Pi|=4,Ci.current=null,function(e,t){if(el=Wt,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var l=r.anchorOffset,o=r.focusNode;r=r.focusOffset;try{n.nodeType,o.nodeType}catch(e){n=null;break e}var u=0,i=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==l&&3!==d.nodeType||(i=u+l),d!==o||0!==r&&3!==d.nodeType||(s=u+r),3===d.nodeType&&(u+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++c===l&&(i=u),p===o&&++f===r&&(s=u),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===i||-1===s?null:{start:i,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(tl={focusedElem:e,selectionRange:n},Wt=!1,Zu=t;null!==Zu;)if(e=(t=Zu).child,1028&t.subtreeFlags&&null!==e)e.return=t,Zu=e;else for(;null!==Zu;){t=Zu;try{var m=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var y=m.memoizedProps,v=m.memoizedState,g=t.stateNode,b=g.getSnapshotBeforeUpdate(t.elementType===t.type?y:nu(t.type,y),v);g.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(a(163))}}catch(e){xs(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Zu=e;break}Zu=t.return}m=ti,ti=!1}(e,n),yi(n,e),hr(tl),Wt=!!el,tl=el=null,e.current=n,gi(n,e,l),Ye(),Pi=i,bt=u,Ni.transition=o}else e.current=n;if(Ki&&(Ki=!1,qi=e,Xi=l),0===(o=e.pendingLanes)&&(Qi=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(lt,e,void 0,!(128&~e.current.flags))}catch(e){}}(n.stateNode),rs(e,Ge()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((l=t[n]).value,{componentStack:l.stack,digest:l.digest});if(Wi)throw Wi=!1,e=Hi,Hi=null,e;!!(1&Xi)&&0!==e.tag&&Ss(),1&(o=e.pendingLanes)?e===Gi?Yi++:(Yi=0,Gi=e):Yi=0,Vl()}(e,t,n,r)}finally{Ni.transition=l,bt=r}return null}function Ss(){if(null!==qi){var e=wt(Xi),t=Ni.transition,n=bt;try{if(Ni.transition=null,bt=16>e?16:e,null===qi)var r=!1;else{if(e=qi,qi=null,Xi=0,6&Pi)throw Error(a(331));var l=Pi;for(Pi|=4,Zu=e.current;null!==Zu;){var o=Zu,u=o.child;if(16&Zu.flags){var i=o.deletions;if(null!==i){for(var s=0;s<i.length;s++){var c=i[s];for(Zu=c;null!==Zu;){var f=Zu;switch(f.tag){case 0:case 11:case 15:ni(8,f,o)}var d=f.child;if(null!==d)d.return=f,Zu=d;else for(;null!==Zu;){var p=(f=Zu).sibling,h=f.return;if(ai(f),f===c){Zu=null;break}if(null!==p){p.return=h,Zu=p;break}Zu=h}}}var m=o.alternate;if(null!==m){var y=m.child;if(null!==y){m.child=null;do{var v=y.sibling;y.sibling=null,y=v}while(null!==y)}}Zu=o}}if(2064&o.subtreeFlags&&null!==u)u.return=o,Zu=u;else e:for(;null!==Zu;){if(2048&(o=Zu).flags)switch(o.tag){case 0:case 11:case 15:ni(9,o,o.return)}var g=o.sibling;if(null!==g){g.return=o.return,Zu=g;break e}Zu=o.return}}var b=e.current;for(Zu=b;null!==Zu;){var w=(u=Zu).child;if(2064&u.subtreeFlags&&null!==w)w.return=u,Zu=w;else e:for(u=b;null!==Zu;){if(2048&(i=Zu).flags)try{switch(i.tag){case 0:case 11:case 15:ri(9,i)}}catch(e){xs(i,i.return,e)}if(i===u){Zu=null;break e}var k=i.sibling;if(null!==k){k.return=i.return,Zu=k;break e}Zu=i.return}}if(Pi=l,Vl(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(lt,e)}catch(e){}r=!0}return r}finally{bt=n,Ni.transition=t}}return!1}function _s(e,t,n){e=Aa(e,t=pu(0,t=su(n,t),1),1),t=es(),null!==e&&(vt(e,1,t),rs(e,t))}function xs(e,t,n){if(3===e.tag)_s(e,e,n);else for(;null!==t;){if(3===t.tag){_s(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Qi||!Qi.has(r))){t=Aa(t,e=hu(t,e=su(n,e),1),1),e=es(),null!==t&&(vt(t,1,e),rs(t,e));break}}t=t.return}}function Es(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=es(),e.pingedLanes|=e.suspendedLanes&n,zi===e&&(Oi&n)===n&&(4===Mi||3===Mi&&(130023424&Oi)===Oi&&500>Ge()-$i?ds(e,0):ji|=n),rs(e,t)}function Cs(e,t){0===t&&(1&e.mode?(t=ct,!(130023424&(ct<<=1))&&(ct=4194304)):t=1);var n=es();null!==(e=Ma(e,t))&&(vt(e,t,n),rs(e,n))}function Ns(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Cs(e,n)}function Ps(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,l=e.memoizedState;null!==l&&(n=l.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),Cs(e,n)}function zs(e,t){return Ke(e,t)}function Ts(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Os(e,t,n,r){return new Ts(e,t,n,r)}function Ls(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Rs(e,t){var n=e.alternate;return null===n?((n=Os(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ms(e,t,n,r,l,o){var u=2;if(r=e,"function"==typeof e)Ls(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case _:return Is(n.children,l,o,t);case x:u=8,l|=8;break;case E:return(e=Os(12,n,t,2|l)).elementType=E,e.lanes=o,e;case z:return(e=Os(13,n,t,l)).elementType=z,e.lanes=o,e;case T:return(e=Os(19,n,t,l)).elementType=T,e.lanes=o,e;case R:return Fs(n,l,o,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:u=10;break e;case N:u=9;break e;case P:u=11;break e;case O:u=14;break e;case L:u=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Os(u,n,t,l)).elementType=e,t.type=r,t.lanes=o,t}function Is(e,t,n,r){return(e=Os(7,e,r,t)).lanes=n,e}function Fs(e,t,n,r){return(e=Os(22,e,r,t)).elementType=R,e.lanes=n,e.stateNode={isHidden:!1},e}function Ds(e,t,n){return(e=Os(6,e,null,t)).lanes=n,e}function js(e,t,n){return(t=Os(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function As(e,t,n,r,l){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=yt(0),this.expirationTimes=yt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=yt(0),this.identifierPrefix=r,this.onRecoverableError=l,this.mutableSourceEagerHydrationData=null}function Us(e,t,n,r,l,a,o,u,i){return e=new As(e,t,n,u,i),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Os(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Fa(a),e}function $s(e){if(!e)return Nl;e:{if(Ve(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ll(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(Ll(n))return Il(e,n,t)}return t}function Vs(e,t,n,r,l,a,o,u,i){return(e=Us(n,r,!0,e,0,a,0,u,i)).context=$s(null),n=e.current,(a=ja(r=es(),l=ts(n))).callback=null!=t?t:null,Aa(n,a,l),e.current.lanes=l,vt(e,l,r),rs(e,r),e}function Bs(e,t,n,r){var l=t.current,a=es(),o=ts(l);return n=$s(n),null===t.context?t.context=n:t.pendingContext=n,(t=ja(a,o)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Aa(l,t,o))&&(ns(e,l,o,a),Ua(e,l,o)),o}function Ws(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Hs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Qs(e,t){Hs(e,t),(e=e.alternate)&&Hs(e,t)}_i=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||zl.current)bu=!0;else{if(!(e.lanes&n||128&t.flags))return bu=!1,function(e,t,n){switch(t.tag){case 3:zu(t),pa();break;case 5:Ga(t);break;case 1:Ll(t.type)&&Fl(t);break;case 4:Xa(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,l=t.memoizedProps.value;Cl(Sa,r._currentValue),r._currentValue=l;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Cl(Ja,1&Ja.current),t.flags|=128,null):n&t.child.childLanes?Du(e,t,n):(Cl(Ja,1&Ja.current),null!==(e=Wu(e,t,n))?e.sibling:null);Cl(Ja,1&Ja.current);break;case 19:if(r=!!(n&t.childLanes),128&e.flags){if(r)return Vu(e,t,n);t.flags|=128}if(null!==(l=t.memoizedState)&&(l.rendering=null,l.tail=null,l.lastEffect=null),Cl(Ja,Ja.current),r)break;return null;case 22:case 23:return t.lanes=0,xu(e,t,n)}return Wu(e,t,n)}(e,t,n);bu=!!(131072&e.flags)}else bu=!1,la&&1048576&t.flags&&Jl(t,Ql,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Bu(e,t),e=t.pendingProps;var l=Ol(t,Pl.current);za(t,n),l=yo(null,t,r,e,l,n);var o=vo();return t.flags|=1,"object"==typeof l&&null!==l&&"function"==typeof l.render&&void 0===l.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ll(r)?(o=!0,Fl(t)):o=!1,t.memoizedState=null!==l.state&&void 0!==l.state?l.state:null,Fa(t),l.updater=lu,t.stateNode=l,l._reactInternals=t,iu(t,r,e,n),t=Pu(null,t,r,!0,o,n)):(t.tag=0,la&&o&&ea(t),wu(null,t,l,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Bu(e,t),e=t.pendingProps,r=(l=r._init)(r._payload),t.type=r,l=t.tag=function(e){if("function"==typeof e)return Ls(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===O)return 14}return 2}(r),e=nu(r,e),l){case 0:t=Cu(null,t,r,e,n);break e;case 1:t=Nu(null,t,r,e,n);break e;case 11:t=ku(null,t,r,e,n);break e;case 14:t=Su(null,t,r,nu(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,l=t.pendingProps,Cu(e,t,r,l=t.elementType===r?l:nu(r,l),n);case 1:return r=t.type,l=t.pendingProps,Nu(e,t,r,l=t.elementType===r?l:nu(r,l),n);case 3:e:{if(zu(t),null===e)throw Error(a(387));r=t.pendingProps,l=(o=t.memoizedState).element,Da(e,t),Va(t,r,null,n);var u=t.memoizedState;if(r=u.element,o.isDehydrated){if(o={element:r,isDehydrated:!1,cache:u.cache,pendingSuspenseBoundaries:u.pendingSuspenseBoundaries,transitions:u.transitions},t.updateQueue.baseState=o,t.memoizedState=o,256&t.flags){t=Tu(e,t,r,n,l=su(Error(a(423)),t));break e}if(r!==l){t=Tu(e,t,r,n,l=su(Error(a(424)),t));break e}for(ra=sl(t.stateNode.containerInfo.firstChild),na=t,la=!0,aa=null,n=ka(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(pa(),r===l){t=Wu(e,t,n);break e}wu(e,t,r,n)}t=t.child}return t;case 5:return Ga(t),null===e&&sa(t),r=t.type,l=t.pendingProps,o=null!==e?e.memoizedProps:null,u=l.children,nl(r,l)?u=null:null!==o&&nl(r,o)&&(t.flags|=32),Eu(e,t),wu(e,t,u,n),t.child;case 6:return null===e&&sa(t),null;case 13:return Du(e,t,n);case 4:return Xa(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=wa(t,null,r,n):wu(e,t,r,n),t.child;case 11:return r=t.type,l=t.pendingProps,ku(e,t,r,l=t.elementType===r?l:nu(r,l),n);case 7:return wu(e,t,t.pendingProps,n),t.child;case 8:case 12:return wu(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,l=t.pendingProps,o=t.memoizedProps,u=l.value,Cl(Sa,r._currentValue),r._currentValue=u,null!==o)if(ur(o.value,u)){if(o.children===l.children&&!zl.current){t=Wu(e,t,n);break e}}else for(null!==(o=t.child)&&(o.return=t);null!==o;){var i=o.dependencies;if(null!==i){u=o.child;for(var s=i.firstContext;null!==s;){if(s.context===r){if(1===o.tag){(s=ja(-1,n&-n)).tag=2;var c=o.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}o.lanes|=n,null!==(s=o.alternate)&&(s.lanes|=n),Pa(o.return,n,t),i.lanes|=n;break}s=s.next}}else if(10===o.tag)u=o.type===t.type?null:o.child;else if(18===o.tag){if(null===(u=o.return))throw Error(a(341));u.lanes|=n,null!==(i=u.alternate)&&(i.lanes|=n),Pa(u,n,t),u=o.sibling}else u=o.child;if(null!==u)u.return=o;else for(u=o;null!==u;){if(u===t){u=null;break}if(null!==(o=u.sibling)){o.return=u.return,u=o;break}u=u.return}o=u}wu(e,t,l.children,n),t=t.child}return t;case 9:return l=t.type,r=t.pendingProps.children,za(t,n),r=r(l=Ta(l)),t.flags|=1,wu(e,t,r,n),t.child;case 14:return l=nu(r=t.type,t.pendingProps),Su(e,t,r,l=nu(r.type,l),n);case 15:return _u(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,l=t.pendingProps,l=t.elementType===r?l:nu(r,l),Bu(e,t),t.tag=1,Ll(r)?(e=!0,Fl(t)):e=!1,za(t,n),ou(t,r,l),iu(t,r,l,n),Pu(null,t,r,!0,e,n);case 19:return Vu(e,t,n);case 22:return xu(e,t,n)}throw Error(a(156,t.tag))};var Ks="function"==typeof reportError?reportError:function(e){console.error(e)};function qs(e){this._internalRoot=e}function Xs(e){this._internalRoot=e}function Ys(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Gs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zs(){}function Js(e,t,n,r,l){var a=n._reactRootContainer;if(a){var o=a;if("function"==typeof l){var u=l;l=function(){var e=Ws(o);u.call(e)}}Bs(t,o,e,l)}else o=function(e,t,n,r,l){if(l){if("function"==typeof r){var a=r;r=function(){var e=Ws(o);a.call(e)}}var o=Vs(t,r,e,0,null,!1,0,"",Zs);return e._reactRootContainer=o,e[hl]=o.current,Vr(8===e.nodeType?e.parentNode:e),cs(),o}for(;l=e.lastChild;)e.removeChild(l);if("function"==typeof r){var u=r;r=function(){var e=Ws(i);u.call(e)}}var i=Us(e,0,!1,null,0,!1,0,"",Zs);return e._reactRootContainer=i,e[hl]=i.current,Vr(8===e.nodeType?e.parentNode:e),cs((function(){Bs(t,i,n,r)})),i}(n,t,e,l,r);return Ws(o)}Xs.prototype.render=qs.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Bs(e,t,null,null)},Xs.prototype.unmount=qs.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cs((function(){Bs(null,e,null,null)})),t[hl]=null}},Xs.prototype.unstable_scheduleHydration=function(e){if(e){var t=xt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Rt.length&&0!==t&&t<Rt[n].priority;n++);Rt.splice(n,0,e),0===n&&Dt(e)}},kt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(gt(t,1|n),rs(t,Ge()),!(6&Pi)&&(Vi=Ge()+500,Vl()))}break;case 13:cs((function(){var t=Ma(e,1);if(null!==t){var n=es();ns(t,e,1,n)}})),Qs(e,1)}},St=function(e){if(13===e.tag){var t=Ma(e,134217728);null!==t&&ns(t,e,134217728,es()),Qs(e,134217728)}},_t=function(e){if(13===e.tag){var t=ts(e),n=Ma(e,t);null!==n&&ns(n,e,t,es()),Qs(e,t)}},xt=function(){return bt},Et=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Se=function(e,t,n){switch(t){case"input":if(Z(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var l=kl(r);if(!l)throw Error(a(90));K(r),Z(r,l)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Pe=ss,ze=cs;var ec={usingClientEntryPoint:!1,Events:[bl,wl,kl,Ce,Ne,ss]},tc={findFiberByHostInstance:gl,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},nc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rc.isDisabled&&rc.supportsFiber)try{lt=rc.inject(nc),at=rc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ec,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ys(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Ys(e))throw Error(a(299));var n=!1,r="",l=Ks;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(l=t.onRecoverableError)),t=Us(e,1,!1,null,0,n,0,r,l),e[hl]=t.current,Vr(8===e.nodeType?e.parentNode:e),new qs(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return cs(e)},t.hydrate=function(e,t,n){if(!Gs(t))throw Error(a(200));return Js(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Ys(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,l=!1,o="",u=Ks;if(null!=n&&(!0===n.unstable_strictMode&&(l=!0),void 0!==n.identifierPrefix&&(o=n.identifierPrefix),void 0!==n.onRecoverableError&&(u=n.onRecoverableError)),t=Vs(t,null,e,1,null!=n?n:null,l,0,o,u),e[hl]=t.current,Vr(e),r)for(e=0;e<r.length;e++)l=(l=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,l]:t.mutableSourceEagerHydrationData.push(n,l);return new Xs(t)},t.render=function(e,t,n){if(!Gs(t))throw Error(a(200));return Js(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Gs(e))throw Error(a(40));return!!e._reactRootContainer&&(cs((function(){Js(null,null,e,!1,(function(){e._reactRootContainer=null,e[hl]=null}))})),!0)},t.unstable_batchedUpdates=ss,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Gs(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return Js(e,t,n,!1,r)},t.version="18.3.1-next-f1338f8080-20240426"},338:(e,t,n)=>{var r=n(961);t.H=r.createRoot,r.hydrateRoot},961:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(551)},20:(e,t,n)=>{var r=n(540),l=Symbol.for("react.element"),a=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,u=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,i={key:!0,ref:!0,__self:!0,__source:!0};function s(e,t,n){var r,a={},s=null,c=null;for(r in void 0!==n&&(s=""+n),void 0!==t.key&&(s=""+t.key),void 0!==t.ref&&(c=t.ref),t)o.call(t,r)&&!i.hasOwnProperty(r)&&(a[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===a[r]&&(a[r]=t[r]);return{$$typeof:l,type:e,key:s,ref:c,props:a,_owner:u.current}}t.Fragment=a,t.jsx=s,t.jsxs=s},287:(e,t)=>{var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),l=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler"),u=Symbol.for("react.provider"),i=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,y={};function v(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||h}function g(){}function b(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var w=b.prototype=new g;w.constructor=b,m(w,v.prototype),w.isPureReactComponent=!0;var k=Array.isArray,S=Object.prototype.hasOwnProperty,_={current:null},x={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,r){var l,a={},o=null,u=null;if(null!=t)for(l in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(o=""+t.key),t)S.call(t,l)&&!x.hasOwnProperty(l)&&(a[l]=t[l]);var i=arguments.length-2;if(1===i)a.children=r;else if(1<i){for(var s=Array(i),c=0;c<i;c++)s[c]=arguments[c+2];a.children=s}if(e&&e.defaultProps)for(l in i=e.defaultProps)void 0===a[l]&&(a[l]=i[l]);return{$$typeof:n,type:e,key:o,ref:u,props:a,_owner:_.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var N=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function z(e,t,l,a,o){var u=typeof e;"undefined"!==u&&"boolean"!==u||(e=null);var i=!1;if(null===e)i=!0;else switch(u){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case n:case r:i=!0}}if(i)return o=o(i=e),e=""===a?"."+P(i,0):a,k(o)?(l="",null!=e&&(l=e.replace(N,"$&/")+"/"),z(o,t,l,"",(function(e){return e}))):null!=o&&(C(o)&&(o=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(o,l+(!o.key||i&&i.key===o.key?"":(""+o.key).replace(N,"$&/")+"/")+e)),t.push(o)),1;if(i=0,a=""===a?".":a+":",k(e))for(var s=0;s<e.length;s++){var c=a+P(u=e[s],s);i+=z(u,t,l,c,o)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(u=e.next()).done;)i+=z(u=u.value,t,l,c=a+P(u,s++),o);else if("object"===u)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return i}function T(e,t,n){if(null==e)return e;var r=[],l=0;return z(e,r,"","",(function(e){return t.call(n,e,l++)})),r}function O(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var L={current:null},R={transition:null},M={ReactCurrentDispatcher:L,ReactCurrentBatchConfig:R,ReactCurrentOwner:_};function I(){throw Error("act(...) is not supported in production builds of React.")}t.Children={map:T,forEach:function(e,t,n){T(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return T(e,(function(){t++})),t},toArray:function(e){return T(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=l,t.Profiler=o,t.PureComponent=b,t.StrictMode=a,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,t.act=I,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var l=m({},e.props),a=e.key,o=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(o=t.ref,u=_.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var i=e.type.defaultProps;for(s in t)S.call(t,s)&&!x.hasOwnProperty(s)&&(l[s]=void 0===t[s]&&void 0!==i?i[s]:t[s])}var s=arguments.length-2;if(1===s)l.children=r;else if(1<s){i=Array(s);for(var c=0;c<s;c++)i[c]=arguments[c+2];l.children=i}return{$$typeof:n,type:e.type,key:a,ref:o,props:l,_owner:u}},t.createContext=function(e){return(e={$$typeof:i,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:u,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:O}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=R.transition;R.transition={};try{e()}finally{R.transition=t}},t.unstable_act=I,t.useCallback=function(e,t){return L.current.useCallback(e,t)},t.useContext=function(e){return L.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return L.current.useDeferredValue(e)},t.useEffect=function(e,t){return L.current.useEffect(e,t)},t.useId=function(){return L.current.useId()},t.useImperativeHandle=function(e,t,n){return L.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return L.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return L.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return L.current.useMemo(e,t)},t.useReducer=function(e,t,n){return L.current.useReducer(e,t,n)},t.useRef=function(e){return L.current.useRef(e)},t.useState=function(e){return L.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return L.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return L.current.useTransition()},t.version="18.3.1"},540:(e,t,n)=>{e.exports=n(287)},848:(e,t,n)=>{e.exports=n(20)},463:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,l=e[r];if(!(0<a(l,t)))break e;e[r]=t,e[n]=l,n=r}}function r(e){return 0===e.length?null:e[0]}function l(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,l=e.length,o=l>>>1;r<o;){var u=2*(r+1)-1,i=e[u],s=u+1,c=e[s];if(0>a(i,n))s<l&&0>a(c,i)?(e[r]=c,e[s]=n,r=s):(e[r]=i,e[u]=n,r=u);else{if(!(s<l&&0>a(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var u=Date,i=u.now();t.unstable_now=function(){return u.now()-i}}var s=[],c=[],f=1,d=null,p=3,h=!1,m=!1,y=!1,v="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)l(c);else{if(!(t.startTime<=e))break;l(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function k(e){if(y=!1,w(e),!m)if(null!==r(s))m=!0,R(S);else{var t=r(c);null!==t&&M(k,t.startTime-e)}}function S(e,n){m=!1,y&&(y=!1,g(C),C=-1),h=!0;var a=p;try{for(w(n),d=r(s);null!==d&&(!(d.expirationTime>n)||e&&!z());){var o=d.callback;if("function"==typeof o){d.callback=null,p=d.priorityLevel;var u=o(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?d.callback=u:d===r(s)&&l(s),w(n)}else l(s);d=r(s)}if(null!==d)var i=!0;else{var f=r(c);null!==f&&M(k,f.startTime-n),i=!1}return i}finally{d=null,p=a,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var _,x=!1,E=null,C=-1,N=5,P=-1;function z(){return!(t.unstable_now()-P<N)}function T(){if(null!==E){var e=t.unstable_now();P=e;var n=!0;try{n=E(!0,e)}finally{n?_():(x=!1,E=null)}}else x=!1}if("function"==typeof b)_=function(){b(T)};else if("undefined"!=typeof MessageChannel){var O=new MessageChannel,L=O.port2;O.port1.onmessage=T,_=function(){L.postMessage(null)}}else _=function(){v(T,0)};function R(e){E=e,x||(x=!0,_())}function M(e,n){C=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,R(S))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):N=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,l,a){var o=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?o+a:o,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:f++,callback:l,priorityLevel:e,startTime:a,expirationTime:u=a+u,sortIndex:-1},a>o?(e.sortIndex=a,n(c,e),null===r(s)&&e===r(c)&&(y?(g(C),C=-1):y=!0,M(k,a-o))):(e.sortIndex=u,n(s,e),m||h||(m=!0,R(S))),e},t.unstable_shouldYield=z,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},982:(e,t,n)=>{e.exports=n(463)},160:(e,t,n)=>{var r=n(540),l="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},a=r.useSyncExternalStore,o=r.useRef,u=r.useEffect,i=r.useMemo,s=r.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,r,c){var f=o(null);if(null===f.current){var d={hasValue:!1,value:null};f.current=d}else d=f.current;f=i((function(){function e(e){if(!u){if(u=!0,a=e,e=r(e),void 0!==c&&d.hasValue){var t=d.value;if(c(t,e))return o=t}return o=e}if(t=o,l(a,e))return t;var n=r(e);return void 0!==c&&c(t,n)?(a=e,t):(a=e,o=n)}var a,o,u=!1,i=void 0===n?null:n;return[function(){return e(t())},null===i?void 0:function(){return e(i())}]}),[t,n,r,c]);var p=a(e,f[0],f[1]);return u((function(){d.hasValue=!0,d.value=p}),[p]),s(p),p}},418:(e,t,n)=>{e.exports=n(160)}},t={};function n(r){var l=t[r];if(void 0!==l)return l.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}var r=n(848),l=n(338);function a(e){return`Minified Redux error #${e}; visit https://redux.js.org/Errors?code=${e} for the full message or use the non-minified dev environment for full errors. `}var o=(()=>"function"==typeof Symbol&&Symbol.observable||"@@observable")(),u=()=>Math.random().toString(36).substring(7).split("").join("."),i={INIT:`@@redux/INIT${u()}`,REPLACE:`@@redux/REPLACE${u()}`,PROBE_UNKNOWN_ACTION:()=>`@@redux/PROBE_UNKNOWN_ACTION${u()}`};function s(e){if("object"!=typeof e||null===e)return!1;let t=e;for(;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t||null===Object.getPrototypeOf(e)}function c(e,t,n){if("function"!=typeof e)throw new Error(a(2));if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(a(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(a(1));return n(c)(e,t)}let r=e,l=t,u=new Map,f=u,d=0,p=!1;function h(){f===u&&(f=new Map,u.forEach(((e,t)=>{f.set(t,e)})))}function m(){if(p)throw new Error(a(3));return l}function y(e){if("function"!=typeof e)throw new Error(a(4));if(p)throw new Error(a(5));let t=!0;h();const n=d++;return f.set(n,e),function(){if(t){if(p)throw new Error(a(6));t=!1,h(),f.delete(n),u=null}}}function v(e){if(!s(e))throw new Error(a(7));if(void 0===e.type)throw new Error(a(8));if("string"!=typeof e.type)throw new Error(a(17));if(p)throw new Error(a(9));try{p=!0,l=r(l,e)}finally{p=!1}return(u=f).forEach((e=>{e()})),e}return v({type:i.INIT}),{dispatch:v,subscribe:y,getState:m,replaceReducer:function(e){if("function"!=typeof e)throw new Error(a(10));r=e,v({type:i.REPLACE})},[o]:function(){const e=y;return{subscribe(t){if("object"!=typeof t||null===t)throw new Error(a(11));function n(){const e=t;e.next&&e.next(m())}return n(),{unsubscribe:e(n)}},[o](){return this}}}}}function f(...e){return 0===e.length?e=>e:1===e.length?e[0]:e.reduce(((e,t)=>(...n)=>e(t(...n))))}function d(e){return({dispatch:t,getState:n})=>r=>l=>"function"==typeof l?l(t,n,e):r(l)}var p=d(),h=d,m=Symbol.for("immer-nothing"),y=Symbol.for("immer-draftable"),v=Symbol.for("immer-state");function g(e,...t){throw new Error(`[Immer] minified error nr: ${e}. Full error at: https://bit.ly/3cXEKWf`)}var b=Object.getPrototypeOf;function w(e){return!!e&&!!e[v]}function k(e){return!!e&&(_(e)||Array.isArray(e)||!!e[y]||!!e.constructor?.[y]||P(e)||z(e))}var S=Object.prototype.constructor.toString();function _(e){if(!e||"object"!=typeof e)return!1;const t=b(e);if(null===t)return!0;const n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===S}function x(e,t){0===E(e)?Reflect.ownKeys(e).forEach((n=>{t(n,e[n],e)})):e.forEach(((n,r)=>t(r,n,e)))}function E(e){const t=e[v];return t?t.type_:Array.isArray(e)?1:P(e)?2:z(e)?3:0}function C(e,t){return 2===E(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function N(e,t,n){const r=E(e);2===r?e.set(t,n):3===r?e.add(n):e[t]=n}function P(e){return e instanceof Map}function z(e){return e instanceof Set}function T(e){return e.copy_||e.base_}function O(e,t){if(P(e))return new Map(e);if(z(e))return new Set(e);if(Array.isArray(e))return Array.prototype.slice.call(e);const n=_(e);if(!0===t||"class_only"===t&&!n){const t=Object.getOwnPropertyDescriptors(e);delete t[v];let n=Reflect.ownKeys(t);for(let r=0;r<n.length;r++){const l=n[r],a=t[l];!1===a.writable&&(a.writable=!0,a.configurable=!0),(a.get||a.set)&&(t[l]={configurable:!0,writable:!0,enumerable:a.enumerable,value:e[l]})}return Object.create(b(e),t)}{const t=b(e);if(null!==t&&n)return{...e};const r=Object.create(t);return Object.assign(r,e)}}function L(e,t=!1){return M(e)||w(e)||!k(e)||(E(e)>1&&(e.set=e.add=e.clear=e.delete=R),Object.freeze(e),t&&Object.entries(e).forEach((([e,t])=>L(t,!0)))),e}function R(){g(2)}function M(e){return Object.isFrozen(e)}var I,F={};function D(e){const t=F[e];return t||g(0),t}function j(){return I}function A(e,t){t&&(D("Patches"),e.patches_=[],e.inversePatches_=[],e.patchListener_=t)}function U(e){$(e),e.drafts_.forEach(B),e.drafts_=null}function $(e){e===I&&(I=e.parent_)}function V(e){return I={drafts_:[],parent_:I,immer_:e,canAutoFreeze_:!0,unfinalizedDrafts_:0}}function B(e){const t=e[v];0===t.type_||1===t.type_?t.revoke_():t.revoked_=!0}function W(e,t){t.unfinalizedDrafts_=t.drafts_.length;const n=t.drafts_[0];return void 0!==e&&e!==n?(n[v].modified_&&(U(t),g(4)),k(e)&&(e=H(t,e),t.parent_||K(t,e)),t.patches_&&D("Patches").generateReplacementPatches_(n[v].base_,e,t.patches_,t.inversePatches_)):e=H(t,n,[]),U(t),t.patches_&&t.patchListener_(t.patches_,t.inversePatches_),e!==m?e:void 0}function H(e,t,n){if(M(t))return t;const r=t[v];if(!r)return x(t,((l,a)=>Q(e,r,t,l,a,n))),t;if(r.scope_!==e)return t;if(!r.modified_)return K(e,r.base_,!0),r.base_;if(!r.finalized_){r.finalized_=!0,r.scope_.unfinalizedDrafts_--;const t=r.copy_;let l=t,a=!1;3===r.type_&&(l=new Set(t),t.clear(),a=!0),x(l,((l,o)=>Q(e,r,t,l,o,n,a))),K(e,t,!1),n&&e.patches_&&D("Patches").generatePatches_(r,n,e.patches_,e.inversePatches_)}return r.copy_}function Q(e,t,n,r,l,a,o){if(w(l)){const o=H(e,l,a&&t&&3!==t.type_&&!C(t.assigned_,r)?a.concat(r):void 0);if(N(n,r,o),!w(o))return;e.canAutoFreeze_=!1}else o&&n.add(l);if(k(l)&&!M(l)){if(!e.immer_.autoFreeze_&&e.unfinalizedDrafts_<1)return;H(e,l),t&&t.scope_.parent_||"symbol"==typeof r||!Object.prototype.propertyIsEnumerable.call(n,r)||K(e,l)}}function K(e,t,n=!1){!e.parent_&&e.immer_.autoFreeze_&&e.canAutoFreeze_&&L(t,n)}var q={get(e,t){if(t===v)return e;const n=T(e);if(!C(n,t))return function(e,t,n){const r=G(t,n);return r?"value"in r?r.value:r.get?.call(e.draft_):void 0}(e,n,t);const r=n[t];return e.finalized_||!k(r)?r:r===Y(e.base_,t)?(J(e),e.copy_[t]=ee(r,e)):r},has:(e,t)=>t in T(e),ownKeys:e=>Reflect.ownKeys(T(e)),set(e,t,n){const r=G(T(e),t);if(r?.set)return r.set.call(e.draft_,n),!0;if(!e.modified_){const r=Y(T(e),t),o=r?.[v];if(o&&o.base_===n)return e.copy_[t]=n,e.assigned_[t]=!1,!0;if(((l=n)===(a=r)?0!==l||1/l==1/a:l!=l&&a!=a)&&(void 0!==n||C(e.base_,t)))return!0;J(e),Z(e)}var l,a;return e.copy_[t]===n&&(void 0!==n||t in e.copy_)||Number.isNaN(n)&&Number.isNaN(e.copy_[t])||(e.copy_[t]=n,e.assigned_[t]=!0),!0},deleteProperty:(e,t)=>(void 0!==Y(e.base_,t)||t in e.base_?(e.assigned_[t]=!1,J(e),Z(e)):delete e.assigned_[t],e.copy_&&delete e.copy_[t],!0),getOwnPropertyDescriptor(e,t){const n=T(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.type_||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty(){g(11)},getPrototypeOf:e=>b(e.base_),setPrototypeOf(){g(12)}},X={};function Y(e,t){const n=e[v];return(n?T(n):e)[t]}function G(e,t){if(!(t in e))return;let n=b(e);for(;n;){const e=Object.getOwnPropertyDescriptor(n,t);if(e)return e;n=b(n)}}function Z(e){e.modified_||(e.modified_=!0,e.parent_&&Z(e.parent_))}function J(e){e.copy_||(e.copy_=O(e.base_,e.scope_.immer_.useStrictShallowCopy_))}function ee(e,t){const n=P(e)?D("MapSet").proxyMap_(e,t):z(e)?D("MapSet").proxySet_(e,t):function(e,t){const n=Array.isArray(e),r={type_:n?1:0,scope_:t?t.scope_:j(),modified_:!1,finalized_:!1,assigned_:{},parent_:t,base_:e,draft_:null,copy_:null,revoke_:null,isManual_:!1};let l=r,a=q;n&&(l=[r],a=X);const{revoke:o,proxy:u}=Proxy.revocable(l,a);return r.draft_=u,r.revoke_=o,u}(e,t);return(t?t.scope_:j()).drafts_.push(n),n}function te(e){if(!k(e)||M(e))return e;const t=e[v];let n;if(t){if(!t.modified_)return t.base_;t.finalized_=!0,n=O(e,t.scope_.immer_.useStrictShallowCopy_)}else n=O(e,!0);return x(n,((e,t)=>{N(n,e,te(t))})),t&&(t.finalized_=!1),n}x(q,((e,t)=>{X[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),X.deleteProperty=function(e,t){return X.set.call(this,e,t,void 0)},X.set=function(e,t,n){return q.set.call(this,e[0],t,n,e[0])};var ne=new class{constructor(e){this.autoFreeze_=!0,this.useStrictShallowCopy_=!1,this.produce=(e,t,n)=>{if("function"==typeof e&&"function"!=typeof t){const n=t;t=e;const r=this;return function(e=n,...l){return r.produce(e,(e=>t.call(this,e,...l)))}}let r;if("function"!=typeof t&&g(6),void 0!==n&&"function"!=typeof n&&g(7),k(e)){const l=V(this),a=ee(e,void 0);let o=!0;try{r=t(a),o=!1}finally{o?U(l):$(l)}return A(l,n),W(r,l)}if(!e||"object"!=typeof e){if(r=t(e),void 0===r&&(r=e),r===m&&(r=void 0),this.autoFreeze_&&L(r,!0),n){const t=[],l=[];D("Patches").generateReplacementPatches_(e,r,t,l),n(t,l)}return r}g(1)},this.produceWithPatches=(e,t)=>{if("function"==typeof e)return(t,...n)=>this.produceWithPatches(t,(t=>e(t,...n)));let n,r;return[this.produce(e,t,((e,t)=>{n=e,r=t})),n,r]},"boolean"==typeof e?.autoFreeze&&this.setAutoFreeze(e.autoFreeze),"boolean"==typeof e?.useStrictShallowCopy&&this.setUseStrictShallowCopy(e.useStrictShallowCopy)}createDraft(e){var t;k(e)||g(8),w(e)&&(w(t=e)||g(10),e=te(t));const n=V(this),r=ee(e,void 0);return r[v].isManual_=!0,$(n),r}finishDraft(e,t){const n=e&&e[v];n&&n.isManual_||g(9);const{scope_:r}=n;return A(r,t),W(void 0,r)}setAutoFreeze(e){this.autoFreeze_=e}setUseStrictShallowCopy(e){this.useStrictShallowCopy_=e}applyPatches(e,t){let n;for(n=t.length-1;n>=0;n--){const r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}n>-1&&(t=t.slice(n+1));const r=D("Patches").applyPatches_;return w(e)?r(e,t):this.produce(e,(e=>r(e,t)))}},re=ne.produce;ne.produceWithPatches.bind(ne),ne.setAutoFreeze.bind(ne),ne.setUseStrictShallowCopy.bind(ne),ne.applyPatches.bind(ne),ne.createDraft.bind(ne),ne.finishDraft.bind(ne);var le="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?f:f.apply(null,arguments)};function ae(e,t){function n(...n){if(t){let r=t(...n);if(!r)throw new Error(ge(0));return{type:e,payload:r.payload,..."meta"in r&&{meta:r.meta},..."error"in r&&{error:r.error}}}return{type:e,payload:n[0]}}return n.toString=()=>`${e}`,n.type=e,n.match=t=>function(e){return s(e)&&"type"in e&&"string"==typeof e.type}(t)&&t.type===e,n}"undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__;var oe=class e extends Array{constructor(...t){super(...t),Object.setPrototypeOf(this,e.prototype)}static get[Symbol.species](){return e}concat(...e){return super.concat.apply(this,e)}prepend(...t){return 1===t.length&&Array.isArray(t[0])?new e(...t[0].concat(this)):new e(...t.concat(this))}};function ue(e){return k(e)?re(e,(()=>{})):e}function ie(e,t,n){return e.has(t)?e.get(t):e.set(t,n(t)).get(t)}var se=e=>t=>{setTimeout(t,e)};function ce(e){const t={},n=[];let r;const l={addCase(e,n){const r="string"==typeof e?e:e.type;if(!r)throw new Error(ge(28));if(r in t)throw new Error(ge(29));return t[r]=n,l},addMatcher:(e,t)=>(n.push({matcher:e,reducer:t}),l),addDefaultCase:e=>(r=e,l)};return e(l),[t,n,r]}var fe=Symbol.for("rtk-slice-createasyncthunk");function de(e,t){return`${e}/${t}`}function pe({creators:e}={}){const t=e?.asyncThunk?.[fe];return function(e){const{name:n,reducerPath:r=n}=e;if(!n)throw new Error(ge(11));const l=("function"==typeof e.reducers?e.reducers(function(){function e(e,t){return{_reducerDefinitionType:"asyncThunk",payloadCreator:e,...t}}return e.withTypes=()=>e,{reducer:e=>Object.assign({[e.name]:(...t)=>e(...t)}[e.name],{_reducerDefinitionType:"reducer"}),preparedReducer:(e,t)=>({_reducerDefinitionType:"reducerWithPrepare",prepare:e,reducer:t}),asyncThunk:e}}()):e.reducers)||{},a=Object.keys(l),o={sliceCaseReducersByName:{},sliceCaseReducersByType:{},actionCreators:{},sliceMatchers:[]},u={addCase(e,t){const n="string"==typeof e?e:e.type;if(!n)throw new Error(ge(12));if(n in o.sliceCaseReducersByType)throw new Error(ge(13));return o.sliceCaseReducersByType[n]=t,u},addMatcher:(e,t)=>(o.sliceMatchers.push({matcher:e,reducer:t}),u),exposeAction:(e,t)=>(o.actionCreators[e]=t,u),exposeCaseReducer:(e,t)=>(o.sliceCaseReducersByName[e]=t,u)};function i(){const[t={},n=[],r]="function"==typeof e.extraReducers?ce(e.extraReducers):[e.extraReducers],l={...t,...o.sliceCaseReducersByType};return function(e){let t,[a,u,i]=ce((e=>{for(let t in l)e.addCase(t,l[t]);for(let t of o.sliceMatchers)e.addMatcher(t.matcher,t.reducer);for(let t of n)e.addMatcher(t.matcher,t.reducer);r&&e.addDefaultCase(r)}));if("function"==typeof e)t=()=>ue(e());else{const n=ue(e);t=()=>n}function s(e=t(),n){let r=[a[n.type],...u.filter((({matcher:e})=>e(n))).map((({reducer:e})=>e))];return 0===r.filter((e=>!!e)).length&&(r=[i]),r.reduce(((e,t)=>{if(t){if(w(e)){const r=t(e,n);return void 0===r?e:r}if(k(e))return re(e,(e=>t(e,n)));{const r=t(e,n);if(void 0===r){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return r}}return e}),e)}return s.getInitialState=t,s}(e.initialState)}a.forEach((r=>{const a=l[r],o={reducerName:r,type:de(n,r),createNotation:"function"==typeof e.reducers};!function(e){return"asyncThunk"===e._reducerDefinitionType}(a)?function({type:e,reducerName:t,createNotation:n},r,l){let a,o;if("reducer"in r){if(n&&!function(e){return"reducerWithPrepare"===e._reducerDefinitionType}(r))throw new Error(ge(17));a=r.reducer,o=r.prepare}else a=r;l.addCase(e,a).exposeCaseReducer(t,a).exposeAction(t,o?ae(e,o):ae(e))}(o,a,u):function({type:e,reducerName:t},n,r,l){if(!l)throw new Error(ge(18));const{payloadCreator:a,fulfilled:o,pending:u,rejected:i,settled:s,options:c}=n,f=l(e,a,c);r.exposeAction(t,f),o&&r.addCase(f.fulfilled,o),u&&r.addCase(f.pending,u),i&&r.addCase(f.rejected,i),s&&r.addMatcher(f.settled,s),r.exposeCaseReducer(t,{fulfilled:o||ye,pending:u||ye,rejected:i||ye,settled:s||ye})}(o,a,u,t)}));const s=e=>e,c=new Map;let f;function d(e,t){return f||(f=i()),f(e,t)}function p(){return f||(f=i()),f.getInitialState()}function h(t,n=!1){function r(e){let r=e[t];return void 0===r&&n&&(r=p()),r}function l(t=s){const r=ie(c,n,(()=>new WeakMap));return ie(r,t,(()=>{const r={};for(const[l,a]of Object.entries(e.selectors??{}))r[l]=he(a,t,p,n);return r}))}return{reducerPath:t,getSelectors:l,get selectors(){return l(r)},selectSlice:r}}const m={name:n,reducer:d,actions:o.actionCreators,caseReducers:o.sliceCaseReducersByName,getInitialState:p,...h(r),injectInto(e,{reducerPath:t,...n}={}){const l=t??r;return e.inject({reducerPath:l,reducer:d},n),{...m,...h(l,!0)}}};return m}}function he(e,t,n,r){function l(l,...a){let o=t(l);return void 0===o&&r&&(o=n()),e(o,...a)}return l.unwrapped=e,l}var me=pe();function ye(){}var{assign:ve}=Object;function ge(e){return`Minified Redux Toolkit error #${e}; visit https://redux-toolkit.js.org/Errors?code=${e} for the full message or use the non-minified dev environment for full errors. `}Symbol.for("rtk-state-proxy-original");const be=e=>{const t=Array.from({length:4},(()=>new Array(4).fill(""))),n=e.map((e=>[...e]));let r=0;const l=[];let a=!1,o=!1;for(let u=0;u<e.length;u++){let i=-1;for(let s=0;s<e[u].length;s++){let c=0;for(let t=s-1;t>=0;t--){if(0===n[u][t]){if(0===n[u][t+1])break;n[u][t]=n[u][t+1],n[u][t+1]=0,c++,a=!0}if(n[u][t]===n[u][t+1]&&t!==i&&t+1!==i){n[u][t]+=n[u][t+1],r+=n[u][t],n[u][t+1]=0,i=t,c++,l.push(u*e.length+s),o=!0;break}}const f=80*c;t[u][s]=`translate(-${f}px, 0px)`}}return{actual:n,animated:t,score:r,stackedIndexes:l,hasStackedCell:o,hasMovedCell:a}},we=e=>{const t=Array.from({length:4},(()=>new Array(4).fill(""))),n=e.map((e=>[...e]));let r=0;const l=[];let a=!1,o=!1;for(let u=0;u<e.length;u++){let i=-1;for(let s=e[u].length-1;s>=0;s--){let c=0;for(let t=s+1;t<n[u].length;t++){if(0===n[u][t]){if(0===n[u][t-1])break;n[u][t]=n[u][t-1],n[u][t-1]=0,c++,a=!0}if(n[u][t]===n[u][t-1]&&t!==i&&t-1!==i){n[u][t]+=n[u][t-1],r+=n[u][t],n[u][t-1]=0,i=t,c++,l.push(u*e.length+s),o=!0;break}}const f=80*c;t[u][s]=`translate(${f}px, 0px)`}}return{actual:n,animated:t,score:r,stackedIndexes:l,hasStackedCell:o,hasMovedCell:a}},ke=e=>{const t=Array.from({length:4},(()=>new Array(4).fill(""))),n=e.map((e=>[...e]));let r=0;const l=[];let a=!1,o=!1;for(let u=0;u<e.length;u++){let i=-1;for(let s=0;s<e[u].length;s++){let c=0;for(let t=s-1;t>=0;t--){if(0===n[t][u]){if(0===n[t+1][u])break;n[t][u]=n[t+1][u],n[t+1][u]=0,c++,a=!0}if(n[t][u]===n[t+1][u]&&t!==i&&t+1!==i){n[t][u]+=n[t+1][u],r+=n[t][u],n[t+1][u]=0,i=t,c++,l.push(s*e.length+u),o=!0;break}}const f=80*c;t[s][u]=`translate(0px, -${f}px)`}}return{actual:n,animated:t,score:r,stackedIndexes:l,hasMovedCell:a,hasStackedCell:o}},Se=e=>{const t=Array.from({length:4},(()=>new Array(4).fill(""))),n=e.map((e=>[...e]));let r=0;const l=[];let a=!1,o=!1;for(let u=0;u<e.length;u++){let i=-1;for(let s=e[u].length-1;s>=0;s--){let c=0;for(let t=s+1;t<e[u].length;t++){if(0===n[t][u]){if(0===n[t-1][u])break;n[t][u]=n[t-1][u],n[t-1][u]=0,c++,a=!0}if(n[t][u]===n[t-1][u]&&t!==i&&t-1!==i){n[t][u]+=n[t-1][u],r+=n[t][u],n[t-1][u]=0,i=t,c++,l.push(s*e.length+u),o=!0;break}}const f=80*c;t[s][u]=`translate(0px, ${f}px)`}}return{actual:n,animated:t,score:r,stackedIndexes:l,hasStackedCell:o,hasMovedCell:a}},_e=(e,t)=>Math.trunc(Math.random()*(t+1-e))+e,xe=e=>{const t=structuredClone(e),n=_e(0,10)>9?4:2,r=e.flat().filter((e=>0===e)).length,l=_e(0,r-1),a={cells:t,spawnIndex:l};if(r>0){let r=0;for(let o=0;o<e.length;o++)for(let u=0;u<e[o].length;u++)if(0===e[o][u]){if(l===r)return t[o][u]=n,a.spawnIndex=o*e.length+u,a;r++}}return a},Ee=()=>{let e=xe([[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]).cells;return e=xe(e).cells,e},Ce="score",Ne="best_score",Pe="cells",ze=localStorage.getItem(Pe),Te=localStorage.getItem(Ce),Oe=localStorage.getItem(Ne),Le=me({name:"game",initialState:{cells:ze?JSON.parse(ze):Ee(),gameOver:!1,score:Te?+Te:0,bestScore:Number(Oe)||0,spawnedIndex:-1,stackedIndexes:[]},selectors:{getCells:e=>e.cells,getGameOver:e=>e.gameOver,getScore:e=>e.score,getSpawnedIndex:e=>e.spawnedIndex,getStackedIndexes:e=>e.stackedIndexes,getBestScore:e=>e.bestScore},reducers:{setCells:(e,{payload:t})=>{e.cells=t},setSpawnedIndex:(e,{payload:t})=>{e.spawnedIndex=t},setStackedIndexes:(e,{payload:t})=>{e.stackedIndexes=t},setScore:(e,{payload:t})=>{e.score=t},addScore:(e,{payload:t})=>{e.score+=t},setGameOver:(e,{payload:t})=>{e.gameOver=t},resetGame:e=>{const t=Number(localStorage.getItem(Ne));e.score>t&&localStorage.setItem(Ne,e.score.toString()),e.cells=Ee(),e.gameOver=!1,e.score=0,e.bestScore=Number(localStorage.getItem(Ne))||0,e.spawnedIndex=-1,e.stackedIndexes=[],localStorage.setItem(Pe,JSON.stringify(e.cells)),localStorage.setItem(Ce,e.score.toString())}}}),{getCells:Re,getScore:Me,getGameOver:Ie,getSpawnedIndex:Fe,getStackedIndexes:De,getBestScore:je}=Le.selectors,{setCells:Ae,setSpawnedIndex:Ue,setStackedIndexes:$e,setScore:Ve,addScore:Be,setGameOver:We,resetGame:He}=Le.actions;var Qe=n(540),Ke=n(418);var qe={notify(){},get:()=>[]};var Xe=(()=>!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement))(),Ye=(()=>"undefined"!=typeof navigator&&"ReactNative"===navigator.product)(),Ge=(()=>Xe||Ye?Qe.useLayoutEffect:Qe.useEffect)();Object.defineProperty,Object.getOwnPropertyNames,Object.getOwnPropertySymbols,Object.getOwnPropertyDescriptor,Object.getPrototypeOf,Object.prototype;var Ze=Symbol.for("react-redux-context"),Je="undefined"!=typeof globalThis?globalThis:{};function et(){if(!Qe.createContext)return{};const e=Je[Ze]??=new Map;let t=e.get(Qe.createContext);return t||(t=Qe.createContext(null),e.set(Qe.createContext,t)),t}var tt=et(),nt=function(e){const{children:t,context:n,serverState:r,store:l}=e,a=Qe.useMemo((()=>{const e=function(e,t){let n,r=qe,l=0,a=!1;function o(){s.onStateChange&&s.onStateChange()}function u(){l++,n||(n=t?t.addNestedSub(o):e.subscribe(o),r=function(){let e=null,t=null;return{clear(){e=null,t=null},notify(){(()=>{let t=e;for(;t;)t.callback(),t=t.next})()},get(){const t=[];let n=e;for(;n;)t.push(n),n=n.next;return t},subscribe(n){let r=!0;const l=t={callback:n,next:null,prev:t};return l.prev?l.prev.next=l:e=l,function(){r&&null!==e&&(r=!1,l.next?l.next.prev=l.prev:t=l.prev,l.prev?l.prev.next=l.next:e=l.next)}}}}())}function i(){l--,n&&0===l&&(n(),n=void 0,r.clear(),r=qe)}const s={addNestedSub:function(e){u();const t=r.subscribe(e);let n=!1;return()=>{n||(n=!0,t(),i())}},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:o,isSubscribed:function(){return a},trySubscribe:function(){a||(a=!0,u())},tryUnsubscribe:function(){a&&(a=!1,i())},getListeners:()=>r};return s}(l);return{store:l,subscription:e,getServerState:r?()=>r:void 0}}),[l,r]),o=Qe.useMemo((()=>l.getState()),[l]);Ge((()=>{const{subscription:e}=a;return e.onStateChange=e.notifyNestedSubs,e.trySubscribe(),o!==l.getState()&&e.notifyNestedSubs(),()=>{e.tryUnsubscribe(),e.onStateChange=void 0}}),[a,o]);const u=n||tt;return Qe.createElement(u.Provider,{value:a},t)};function rt(e=tt){return function(){return Qe.useContext(e)}}var lt=rt();function at(e=tt){const t=e===tt?lt:rt(e),n=()=>{const{store:e}=t();return e};return Object.assign(n,{withTypes:()=>n}),n}var ot=at();function ut(e=tt){const t=e===tt?ot:at(e),n=()=>t().dispatch;return Object.assign(n,{withTypes:()=>n}),n}var it=ut(),st=(e,t)=>e===t;function ct(e=tt){const t=e===tt?lt:rt(e),n=(e,n={})=>{const{equalityFn:r=st}="function"==typeof n?{equalityFn:n}:n,l=t(),{store:a,subscription:o,getServerState:u}=l,i=(Qe.useRef(!0),Qe.useCallback({[e.name]:t=>e(t)}[e.name],[e])),s=(0,Ke.useSyncExternalStoreWithSelector)(o.addNestedSub,a.getState,u||a.getState,i,r);return Qe.useDebugValue(s),s};return Object.assign(n,{withTypes:()=>n}),n}var ft=ct();const dt=function(e){const t=function(e){const{thunk:t=!0,immutableCheck:n=!0,serializableCheck:r=!0,actionCreatorCheck:l=!0}=e??{};let a=new oe;return t&&("boolean"==typeof t?a.push(p):a.push(h(t.extraArgument))),a},{reducer:n,middleware:r,devTools:l=!0,preloadedState:o,enhancers:u}=e||{};let d,m;if("function"==typeof n)d=n;else{if(!s(n))throw new Error(ge(1));d=function(e){const t=Object.keys(e),n={};for(let r=0;r<t.length;r++){const l=t[r];"function"==typeof e[l]&&(n[l]=e[l])}const r=Object.keys(n);let l;try{!function(e){Object.keys(e).forEach((t=>{const n=e[t];if(void 0===n(void 0,{type:i.INIT}))throw new Error(a(12));if(void 0===n(void 0,{type:i.PROBE_UNKNOWN_ACTION()}))throw new Error(a(13))}))}(n)}catch(e){l=e}return function(e={},t){if(l)throw l;let o=!1;const u={};for(let l=0;l<r.length;l++){const i=r[l],s=n[i],c=e[i],f=s(c,t);if(void 0===f)throw t&&t.type,new Error(a(14));u[i]=f,o=o||f!==c}return o=o||r.length!==Object.keys(e).length,o?u:e}}(n)}m="function"==typeof r?r(t):t();let y=f;l&&(y=le({trace:!1,..."object"==typeof l&&l}));const v=function(...e){return t=>(n,r)=>{const l=t(n,r);let o=()=>{throw new Error(a(15))};const u={getState:l.getState,dispatch:(e,...t)=>o(e,...t)},i=e.map((e=>e(u)));return o=f(...i)(l.dispatch),{...l,dispatch:o}}}(...m),g=(e=>function(t){const{autoBatch:n=!0}=t??{};let r=new oe(e);return n&&r.push(((e={type:"raf"})=>t=>(...n)=>{const r=t(...n);let l=!0,a=!1,o=!1;const u=new Set,i="tick"===e.type?queueMicrotask:"raf"===e.type?"undefined"!=typeof window&&window.requestAnimationFrame?window.requestAnimationFrame:se(10):"callback"===e.type?e.queueNotification:se(e.timeout),s=()=>{o=!1,a&&(a=!1,u.forEach((e=>e())))};return Object.assign({},r,{subscribe(e){const t=r.subscribe((()=>l&&e()));return u.add(e),()=>{t(),u.delete(e)}},dispatch(e){try{return l=!e?.meta?.RTK_autoBatch,a=!l,a&&(o||(o=!0,i(s))),r.dispatch(e)}finally{l=!0}}})})("object"==typeof n?n:void 0)),r})(v);return c(d,o,y(..."function"==typeof u?u(g):g()))}({reducer:{[Le.name]:Le.reducer}}),pt=ft.withTypes(),ht=it.withTypes(),mt=e=>(0,r.jsx)("div",{className:"e_6RFB_oKH6XKMLRUJWm","data-value":e.value,"data-spawned":e.spawned,children:e.value});var yt="XWzdHNH7laYLLwSgQwL_";const vt=()=>(0,r.jsxs)("div",{className:"PyzM9bKL2InadLXWmYsZ",children:[(0,r.jsx)("div",{className:yt}),(0,r.jsx)("div",{className:yt}),(0,r.jsx)("div",{className:yt}),(0,r.jsx)("div",{className:yt}),(0,r.jsx)("div",{className:yt}),(0,r.jsx)("div",{className:yt}),(0,r.jsx)("div",{className:yt}),(0,r.jsx)("div",{className:yt}),(0,r.jsx)("div",{className:yt}),(0,r.jsx)("div",{className:yt}),(0,r.jsx)("div",{className:yt}),(0,r.jsx)("div",{className:yt}),(0,r.jsx)("div",{className:yt}),(0,r.jsx)("div",{className:yt}),(0,r.jsx)("div",{className:yt}),(0,r.jsx)("div",{className:yt})]}),gt={ArrowUp:ke,ArrowDown:Se,ArrowLeft:be,ArrowRight:we,KeyW:ke,KeyS:Se,KeyA:be,KeyD:we},bt="transform 170ms ease",wt=()=>{const e=pt((e=>Re(e))),t=pt((e=>Fe(e))),n=pt((e=>De(e))),l=(0,Qe.useRef)(null),a=pt((e=>Me(e))),o=ht(),u=t=>{if(l.current&&gt[t]){Object.values(gt).every((t=>{const n=t(e);return!n.hasMovedCell&&!n.hasStackedCell}))&&o(We(!0));const{animated:n,actual:r,stackedIndexes:a,hasStackedCell:u,hasMovedCell:i,score:s}=gt[t](e);if(!i&&!u)return;const c=n.flat(),f=l.current.children,d=xe(r);for(let e=0;e<f.length;e++)f[e].style.transform=c[e],f[e].style.transition=bt;(()=>{const e=performance.now(),t=()=>{performance.now()-e>=170?(o(Be(s)),o(Ae(d.cells)),o(Ue(d.spawnIndex)),o($e(a))):requestAnimationFrame(t)};requestAnimationFrame(t)})()}};return(0,Qe.useEffect)((()=>{document.documentElement.style.setProperty("--transition-duration","170ms")}),[]),(0,Qe.useEffect)((()=>{if(l.current){const e=l.current.children;Array.from(e).forEach((e=>{e.style.transform="translate(0px, 0px)",e.style.transition="none"}))}localStorage.setItem(Pe,JSON.stringify(e)),localStorage.setItem(Ce,a.toString());let t={x:0,y:0},n={x:0,y:0};const r=e=>{const{clientX:n,clientY:r}=e.changedTouches[0];t={x:n,y:r}},o=e=>{n.x=e.changedTouches[0].clientX,n.y=e.changedTouches[0].clientY},i=()=>{const e=n.x-t.x,r=n.y-t.y;let l;if(Math.abs(e)>Math.abs(r)){if(e<50)return;l=e>0?"ArrowRight":"ArrowLeft"}else{if(r<50)return;l=r>0?"ArrowDown":"ArrowUp"}u(l),n.x=0,n.y=0},s=e=>{u(e.code)};return document.body.addEventListener("keyup",s),document.body.addEventListener("touchstart",r),document.body.addEventListener("touchmove",o),document.body.addEventListener("touchend",i),()=>{var e;document.body.removeEventListener("keyup",s),document.body.removeEventListener("touchstart",r),document.body.removeEventListener("touchmove",o),document.body.removeEventListener("touchend",i);const t=null===(e=l.current)||void 0===e?void 0:e.children;Array.from(t).forEach((e=>{e.style.transform="translate(0px, 0px)",e.style.transition=bt}))}}),[e]),(0,r.jsxs)("div",{className:"PolP6AfZAjsgbVTpz3sB",children:[(0,r.jsx)("div",{className:"ZHZxC9_srdjF1XgeGc2Q",children:(0,r.jsx)(vt,{})}),(0,r.jsx)("div",{className:"fdDPrJmMMn06mvhKLyTq",ref:l,children:e.flat().map(((e,l)=>(0,r.jsx)(mt,{value:e,spawned:l===t,stacked:n.includes(l)},l)))})]})},kt=e=>(0,r.jsx)(nt,{store:dt,children:e.children}),St=()=>{const e=pt((e=>Me(e))),t=pt((e=>je(e))),n=ht();return(0,r.jsxs)("div",{className:"RrE330AqEdnMdkhEraxb",children:[(0,r.jsxs)("div",{children:[(0,r.jsxs)("div",{children:["Score: ",e]}),(0,r.jsxs)("div",{children:["Best score: ",t]})]}),(0,r.jsx)("button",{className:"xxdj_qYNr94vcmAi6Y45",onClick:()=>{n(He())},children:"New game"})]})},_t=e=>{const t=pt((e=>Ie(e))),n=ht();return(0,r.jsxs)("div",{className:"za53aVYTLGuCg4nvPPeP",children:[e.children,t&&(0,r.jsx)("div",{className:"uEbL3k5z9OTslZ_SnpSA",onClick:()=>n(He()),children:"New game"})]})},xt=()=>(0,r.jsx)(r.Fragment,{children:(0,r.jsx)(kt,{children:(0,r.jsxs)(_t,{children:[(0,r.jsx)(St,{}),(0,r.jsx)(wt,{})]})})}),Et=document.getElementById("root");Et&&(0,l.H)(Et).render((0,r.jsx)(xt,{}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,